netShip: A Networked Virtual Platform for Large-Scale
Heterogeneous Distributed Embedded Systems
(大規模な異種分散組込みシステムのための仮想接続環境)

-ABSTRACT

シングルSocからネットワーク(組込みデバイスがバッグエンドクラウドコンピューティングサーバーと通信する)へ,
組込みシステムのクラスの台頭は，分散環境で同時に処理する異種混合なコンポーネントの数が増加するという特色をなす。

これらのシステムの規模と複雑さが成長し続けると、スケーラブルかつ効率的なシミュレータが必要。
私たちは、モデリングとシミュレーション用のスケーラブルな環境である仮想接続プラットフォームを提案します。

目標は、チップ、ノード、およびネットワークレベルを扱うことによって，組み込みコンピューティング・アプリケーションの開発/最適化をサポートするのがゴール。


我々のアプローチの特性を説明するために、我々は2つの非常に異なるケーススタディを提示します：
異機種分散型の組込みシステム用のOpen MPIスケジューラの設計や携帯電話からアップロードした写真の分析を通じて群集推定用のアプリケーションの開発

-intro
コンピューティングシステムは、ますます、同時異機種、および相互接続さになってきています。
この傾向は、すべてのスケールで起こる：
マルチコアのSoC(様々なプロセッサコアや特定のアクセラレータを持つ)から，ラージスケールのデータセンターシステム(汎用プロセッサブレードのラックやGPUs、FPGA技術を基盤としたアクセラレーターボード)まで


また、最近は多くの組み込み機器は、一つ以上のネットワークに接続されて動作(Ethernet,3G,4G,LTE,WLAN)

その結果、ソフトウェアアプリケーションの増加は、異種無線および/または有線ネットワークを介して通信し、組み込みデバイスとバックエンドサーバー上で同時に実行する計算を伴います。

例えば、携帯視覚探索は、スマートフォンの強力な計算とクラウドシステムへ接続するためのブロードバンドワイヤレスネットワークへのアクセスの両方に影響を与えるアプリケーションの一種である


私たちは、これらのシステムの設計やプログラミングはEDA(半導体や電子機器の設計作業を自動化で行うこと)のための多くの新しいユニークな機会を提供すると主張しています。

例えば、システムおよびサブシステムアーキテクトは、多くの異種デバイスの相互作用をモデル、シミュレート、最適化するためのツールが必要。

ハードウェア設計者は、彼らがサポートすべきアプリケーション、ソフトウェアおよびネットワークスタックを特徴つけるためのツールを必要としている。

ソフトウェア開発者は、早期に基盤となるハードウェア・アーキテクチャの高レベルなモデリング環境が必要としている。

この方向への一歩として、我々は netShipを提案する。このnetshipは大規模な異種混合システムのシミュレート可能モデルを開発、あるいはそれらの上で組込みアプリケーションが走るプログラミングをサポートする仮想接続環境です。

netShipのユーザーは、インフラストラクチャの助けを借りて、複数の異なる仮想プラットフォームを組み合わせることで、そのターゲットシステムをモデル化することができる
(インフラストラクチャ...異なる仮想マシン間で、相互接続や同期、管理を行う)

ターゲットシステムが与えられたとき、netShipはシミュレーション環境(それぞれのVPが動作する、ドライバーやアプリケーションを伴ってリアルなソフトウェアスタックやLinuxシステムを走らせるシングルデバイスシミュレータのように)をセットアップするために使われる。

したがって、それは実際にデバイスを配置することなく、分散システム全体にわたる実際のアプリケーションを実行することが可能になります。
これはユーザーがソフトウェアの機能的な検証プロセスを開始することと、ハードウェアやネットワークの設計最適化プロセスを駆動することを可能とする。

特定の分野での用語仮想プラットフォーム（VP）および仮想マシン（VM）は、多くの場合、明確な区別せずに使用されていますが、本稿ではそれらを区別することが特に重要です。


VPはプロセッサと周辺機器を備えているシミュレート可能なモデルであり、ホストの命令セットアーキテクチャ（ISA）の上でターゲットバイナリコードをシミュレートするために、バイナリ変換を使用する。

実際のハードウェア実装が確定される前に、
VPは所与のシステムのハードウェアやソフトウェア部分のシステムレベルの協調シミュレーションを可能にします。

代わりに、VMは、仮想化環境を作成するために、物理リソースの管理およびプロビジョニング(ユーザの需要を予想し、設備やサービスなどのリソースを計画的に調達し、ユーザの必要に応じたサービスを提供できるように備える行為)を行う。

リソースは、主に1つまたは複数のサーバコンピュータによって提供され、管理はハイパーバイザ(バーチャルマシンを実行するための仮想化技術のこと。 仮想化ソフトとほぼ同義。 )によって行われます。

VPの例は、OVP、VSP、およびQEMUが含まれます。
一方VMsの例はXenハイパーバイザによって可能となるインスタンス(KVM,VMware)

斬新なVP-on-VM modelのおかげで、netShipのインフラストラクチャは複数の異なるVPを備えたシステムをモデル化するという困難なプロセスを簡素化します。

実際には、ネットワークを介して相互接続された複数のVPをサポートする能力は、それらの機能のスーパーセットへのアクセスを提供しながら、一つの特定のVPの制限からnetShipをfreeにする。

例えば、特定のARMベースの携帯電話もしくはMIPSベースのサーバー上で走るアプリケーションのモデリングに興味があるユーザーは、
Androidエミュレータ[1]とOVPノードのネットワークを構築するためにnetShipを使用することができます。




図1に示すように、VP-on-VM モデルは水平方向と垂直方向の両方のｽｹｰﾗﾋﾞﾘﾃｨを実現する。
ユーザーはVMインスタンスをネットワークに追加する(水平方向のスケーラビリティ)ことでシステムをスケールアウトできたり、
それぞれのVMインスタンスをCPUコア(より多くのVPインスタンスが走る=垂直スケーラビリティ)に割り当てることによってシステムをスケールアップできる。


netShipにVP-on-VM モデルを追加するもう一つの重要な利点は、
VMの特徴(VM instancesの一時停止や再開、特定のVPタイプ用に事前に簡易設定の複製、物理マシン間でそれらを移行)へのアクセスである。

Contribution:
この研究活動の主な目的は、分散異種の組込みシステムの分析のためのネットワーク化仮想プラットフォームを構築し、使用する方法を理解することです。


そうするために、我々は(異類混交とスケーラビリティのサポートをメインの目的とする)VP-over-VMモデルに基づくプロトタイプとしてnetShipを構築しました。

我々の知る限り、これはCADツールのこのタイプを提示する最初の論文です。

最初のケーススタディは、ネットワーク仮想プラットフォームは、あるパフォーマンス・メトリックを請負ながら、ターゲット・システムで使用可能な計算資源をよりよく利用するために使用できるというケーススタディを示す。

第二のケーススタディは、ネットワーク化された仮想プラットフォームは、多くの個人的なモバイルデバイスや、複数のコンピュータサーバで構成される異機種分散システム上で動作するソフトウェアアプリケーションを開発するためにどう使用されるかを示す。
一方、同時に、全体のシステムの資源活用の見積りを取得するソフトウェアアプリケーションを開発するためにどう使用されるかも示す。


CONCLUSIONS--
我々はnetShip(ネットワーク化されたVPsを構築するためのフレームワーク)の設計と実装を行った。

ネットワーク化されたVPsは様々な目的に活用される
(i)分散アプリケーションのシミュレーション, ii)システム、電力、および性能解析, iii)組込みネットワークの特徴のモデリング/分析の費用)

また、特定のアルゴリズム用のハードウェアアクセラレータを設計しました。
我々は、アクセラレータは、シミュレーションを務めるCPUのより多くのリソースを必要とするかもしれないと分析しました。

我々は、この現象が部分的に全体のネットワーク化VPのスケーラビリティをどれくらい制限するかを定量化し、
ミュレーション性能の損失をバランス対抗するために、VPsの分散の仕方のガイドラインを提供しました。

最後に我々は二つのネットワーク化されたVPsの開発するnetShipを使った。

我々はMPIに基づいて、スケジューラを設計し、スケジューラは異機種のマシンのネットワークを介して多くのMPIジョブの実行を最適化する(単にアプリケーションごとの性能プロファイルに基づいて利用可能なマシン間でジョブを分配することにより)ことができるか確認するために1つのVPを使った。

残りのVPはポータブルデバイスとサーバのクラウド間で分散アプリケーションを設計/検証し、リアルタイムで実行するアプリケーション全体を保証するサーバーの数と画像サイズに関する潜在的な洞察を導き出す用に使った。





















