#Abstract

**モバイルデバイスは日常生活で普遍的であり、より大きな戦場ネットワークの一環として今日の兵士にとって貴重なデバイスとなっています。**

開発プラットフォームのオープン性のために、Androidはこの進化して成熟しつつあるテクノロジー配信のパラダイムの中で、サポートされているオペレーティングシステムとして最近選択されました。
陸軍のネットワークは、しばしば敵対的な環境で動作しなければならず、本質的には移動性と臨機応変です。しばしば最良に通信リンクを脆弱にする。
しかし、ハンドヘルドデバイスには、WiFiやBluetoothなどの低電力ネットワーク機能が一般的です。
この作業では、展開された設定で動作するハンドヘルドを結合するための低電力ネットワークプロトコルとしてのBluetoothの使用を分析します。
Bluetoothを使用した分散型ハンドヘルドの機能を集約することにより、**タスクとデータの並列処理を実現することができ、ソリューションの高速化とバッテリの削減を実現します。**

このペーパーでは、戦術的なエッジで動作する兵士の能力を向上させる提案された拡張機能を備えた単純化されたテストケースのコンテキストで、**「BlueHoc」と呼ばれる予備的なスケーラブルなボスワーカーパラダイムのパフォーマンスについて説明します。**

#1 intro
軍隊のミッション、特に陸軍のミッションは、大容量で待ち時間の少ない固定インフラの贅沢さを持たない。
敵対的な環境で働くことは一般的であり、**モバイルアドホックネットワーク（MANET）**は、展開された軍のバックボーンを形成します。
通常、ハンドヘルドデバイスなどのエッジノードへの最後のホップは、すべての中で最もコストがかかります。

**陸軍のMANET配信では、展開されたネットワークに必要な帯域幅を提供する計画が進行中ですが、展開されたエッジノードでの処理とデータ配信は引き続き重要なニーズです。**

各デバイスには、事前にロードされたアプリケーションとデータがあります。
近接した他のデバイスとペアになっている場合、これらのデバイスが結合され、集約されている場合、より高い容量によってどのような新しい機能が提供されますか？
戦闘場で行われる任務には、全体的なバッテリの放電を制限するような方法でコンピューティングパワーを同期させることが非常に重要です。

**このプロジェクトでは、Bluetooth経由でワイヤレス通信するモバイルデバイス間で分散計算を可能にするシステムであるBlueHocについて説明します。
膨大な数の利用可能なモバイルデバイスは、並列化可能な計算の多様性を解決するために利用できる計算リソースを提供します。**

モバイルデバイスのリソースを組み合わせて活用することで、モバイル兵士およびTactical Operations Center（TOCの据置きオペレーターの両方に対して並列コンピューティングを実行できる分散インフラストラクチャーを作成できます。(Mobile device resources can be combined and leveraged to create a distributed infrastructure that is able to perform parallel computing for both mobile Soldiers and stationary operators in a Tactical Operations Center (TOC).)

コンピューティングパワーを集約することで、「多くの陸軍接続機器からどのようなコンピューティング能力を達成できるか」、「陸軍運用ドメインにどのような新しい能力をもたらすことができるか」などの重要な質問に答えることができます。

**これらの質問は、現場で単一ノードの高性能コンピューティング（HPC）システムを構築すること、または常にその接続性を保証することが必ずしも実現可能なわけではないので、陸軍にとっては重要ではなく、極めて貴重です。**
さらに、伝統的なクラウドベースのサービスは、兵士が働く戦術的なエッジでは常に利用できるとは限りません。
**このプロジェクトは、HPCを兵士に近づけようとし、利用可能で十分に活用されていないリソースからHPCシステムを構築することを可能にします。**

以下では、**第2章でBluetoothを使用した分散コンピューティングにおける関連作業を要約します。
セクション3では、このアーキテクチャと実装で選択された運用環境とテスト環境について説明します。
システムの性能の予備的結果はセクション4で与えられる。**

最後に、第5章で結論と可能な将来の拡張について簡単に議論する。

##3.1 Android Parallel Computing Support
HPCの世界では、メッセージパッシング（およびメッセージパッシングインターフェイス[MPI]）は、並列処理のために広く使用され、テストされているパラダイムです。

SPMD（Single Program-Multiple Data）パラダイムに続いて、タスクとデータの両方の並列処理に役立ちます。

分散メモリシステムにおいても有効であることが示されている[10]。

MPIは、並列システムにおけるポータブルメッセージパッシングプログラムのルーチンライブラリであるため、プロジェクトの初期調査では、Android用のMPIサポートが評価されています。

AndroidはLinuxカーネルから逸脱しているため、
Androidは一般的なLinuxアプリケーションとライブラリを完全にサポートしていません。

その結果、MPIはAndroidに正常に移植されませんでした。
その結果、Bluetoothに組み込まれ、Androidによって完全にサポートされている無線周波数通信（RFCOMM）プロトコルを使用して、MPIへの代替アプローチが開発されました。

LinuxアプリケーションをAndroidに移植することの難しさは、オペレーティングシステム間の2つの重要な違いにあります。

まず、Androidオペレーティングシステムは標準のLinuxカーネルを利用していません。

たとえば、GoogleはGNUカーネルから分岐して独自のカーネルを作成し、低消費電力デバイスの効率を上げるために必要と思われる変更を柔軟に行うことを選択しました。

Androidカーネルは、GNU libcを、Googleが低消費電力デバイスをターゲットにして開発した軽量のlibcライブラリであるBionicに置き換えました。

2つのライブラリの最初の違いは、Bionicは完全なC / C ++標準をサポートしていないことです。

 C ++の例外を処理、スローまたはパスしません。

Androidの主要なプログラミング言語はJavaであるため、すべての例外がJavaランタイムレベルで処理されるという決定が下されました。

さらに、BionicにはC ++標準テンプレートライブラリ（STL）がありません。

いくつかのC ++ライブラリが欠けていても、多くのLinuxライブラリの移植が阻害されるわけではないかもしれませんが、AndroidとLinuxの違いは確かに難しさです。
ビジネス向け Google 翻訳:翻訳者ツールキットウェブサイト翻訳ツールグローバル マーケット ファインダー

LinuxとAndroidオペレーティングシステムの第2の違いは、追加のライブラリを実装した程度です。

Androidオペレーティングシステムで、別のLinuxライブラリがすでに提供している特定の機能が必要な場合、ほとんどのプログラマと同様に、試して検証済みのLinuxライブラリを利用することを選択します。

つまり、Googleはカーネルと同じように独自のバージョンをフォークし、そのライブラリ内のいくつかの関数をサポートすることを選択し、他は未定義または未実装のままにしておきます。

特に、Dalvik JVMで使用されるlibpthreadライブラリは、多くのライブラリで必要とされるいくつかの機能を取り除いています。

pthreadライブラリと機能のほとんどはまだそこにありますが、pthread_cancel（）のような機能がありません。
Googleでは、pthread_cancel（）をサポートしないことに決めました。なぜなら、これを行うには、Cライブラリを非常に大きなメリット[11]で大幅に大きくする必要があったからです。

特定のシナリオではpthread_cancel（）が必要であり、他のpthread呼び出しで置き換えることもできないこともありますが、最終的には、フォークされたライブラリに特定の機能が含まれているかどうかを選択できます。

したがって、開発者は通常、LinuxライブラリをAndroidに移植する場合、必要なすべての依存関係を構築する必要があります。

#4
π推定のためのモンテカルロ法は、Androidデバイスを用いた分散コンピューティングの実験的応用として役立った。

ブルートゥース無線技術を活用して低消費電力のアドホックネットワークを構築することで、複数のモバイルシステムが連携して一括計算を行うことができます。
単純なブロックスケジューリングアルゴリズムは、複数のデバイス間で作業負荷分散を処理しました。

反復の総数は、計算に使用可能なデバイスの数で均等に割ります。

デバイスの数が反復回数を均等に分割できない場合は、部門の上限値が労働者に発行されます。

次に、各デバイスを初期化して、割り当てられた問題の反復回数を計算します。

Android分散コンピューティング評価のこの初期段階では、スケジューリング手法は、モバイルデバイスの異機種ネットワークのパフォーマンス特性の違いを無視します。

例えば、200万回の反復と5つのワーカーデバイスがあれば、各デバイスは400万回の反復を個別に計算します。

現在の実装では、指定されたボス・ノードはダーツ・スローを実行しませんが、接続されたノードから結果を収集し、収集されたデータから最終的な計算を実行します。
πアプリケーションは、5つの異なるAndroidプラットフォームで分析されました。

ハードウェアの仕様とオペレーティングシステムのセットアップに関する詳細は、表1にまとめられています。異なるAndroidデバイス用の1つのデバイスの非分散ベースパフォーマンス測定値を図5にまとめています。

サムスンギャラクシーSIIの予期せぬ結果に関しては、バックグラウンドのユーザーアプリケーションを実行すると実行時間に悪影響を与えました（スマートフォンを積極的に利用しています）。

結果として、検討中の他のAndroidデバイスと比較して、Galaxy SIIには多数のユーザーアプリケーションがインストールされてロードされており、アルゴリズムのパフォーマンスに顕著な影響を与えていました。

実験的なテストセットアップは、同種のBluetoothデバイスネットワークと異種のBluetoothデバイスネットワークの両方を分析しました。

ブロックスケジューリングを使用したこの練習では、ワークロードの分散が最適であったため、均一なデバイスネットワークで得られた結果は、Androidデバイスネットワークが混在するパフォーマンスを上回りました。



PandaBoardネットワークの記録された実行時間を表2に示します。

不均一なAndroidデバイスネットワークをテストするために、PandaBoard、Nexus 7、Samsung Galaxy、Asus Transformerを使用して異種ネットワークが形成されました。

これは、兵士が異なる特性を持つ異なる種類のモバイルデバイスを自由に処分できるシナリオをシミュレートします。

表3は、反復回数が108に増加するにつれて、異なるAndroidデバイスで構成されたBluetoothネットワーク設定の実行時間を示しています。

達成されたパフォーマンス測定値のグラフ表示が図6に示されています。

π推定アルゴリズムでは、複数のAndroidデバイス間の作業分散による並列コンピューティングにより、解決までの全体的な時間が明白に短縮されます。

予想通り、均質なデバイス構成を持つネットワークは、結果の全体的な時間が最も遅いデバイスによって制限されているためスケーラビリティが優れています（したがって、アイドル回転しているプロセッサの非効率性）。

反復やネットワークの種類にかかわらず、この計算集約的なタスクで4つのAndroidデバイスを活用すると、最悪の場合、実行時間が元の時間の3分の1に減りました。

実行時間の短縮は、Bluetoothネットワーク対応のAndroidデバイスでの分散コンピューティングの潜在的な利点を示します。
#5 Conclusion and Future Work

デバイスの最大の進歩の1つは、地理空間認識を可能にする方法です。 ユーザの場所は豊富な情報をもたらすことができ、これらのデバイスが毎日処理する膨大な数のクエリに重要なフィルタになることがあります。
天気、レストランレビュー、または交通速度を報告することから、重要な、しばしば一時的なデータをより広いユーザコミュニティにブロードキャストすることができます。
**ただし、クラウドのネットワーク接続が保証されていないときにデータと処理を利用できるようにすることは、調査が始まったばかりです。**

展開されたモバイルデバイスのリソースをプールすることによって、1つのデバイスの内部ストレージが不十分なデバイス間でデータを事前にロードして配布できるシナリオを想定することができます。

**さらに、これらのデバイスを仲介して共有することで、ソリューションの時間を短縮したり、バッテリの寿命を節約するための共有ワークロード、またはその2つの組み合わせを提供できます。**

このすべては、**このホワイトペーパーで説明しているAndroidベースのデバイス上のBluetoothなどの一般的な通信プロトコルを使用して実行できます。**
このフレームワークは、地理空間的に共同配置された少数のグループの友軍にとって重要な能力を提供し、本書で説明されている小規模な試験研究で証明されています。


Bluetoothを使用したモバイルネットワークで行われていた他の過去の研究と同様に、BlueHocは初期段階にあります。
**デバイスのドロップアウトとドロップインを可能にするスケジューリングの改善など、より優れたロードバランシングなど、さらなる進歩が計画されています。
ディスカバリープロトコルでは、最適なワークロード分散を実現するために、ガイド付きの自己スケジューリングなどのスケジューリング手法と組み合わせて、ホストプロセッサタイプと予想されるパフォーマンスを組み込む必要があります。**
