#Abstract

オムニバスの処理能力は何ですか？

列車が気候モデルを計算することはできますか？ 今日のスマートフォンはますます強力になっており、以前のハイエンドのワークステーションと同様の性能を備えています。

**この力は、ローカルのモバイルアドホッククラスタを構築することによって、共同して協調的に使用することもできます。**

  この記事では、スマートフォンクラスタの設定は可能であるだけでなく、モバイルデバイスの膨大な量とそのアプリケーションから恩恵を受けるアプリケーションを考慮すると、合理的なことでもあります。
  
#1 intro
**モバイルコンピューティングでは、明らかにエネルギーを小型化して節約する傾向がありますが、同時にモバイルデバイスもより強力になっています。**
実際、今日のスマートフォンは、数年前からハイエンドのワークステーションの計算機能を備えています。

そして、昨日のクラスタワークステーションが気候モデルを計算したり、核爆発をシミュレートすることができたとき、今日のスマートフォンのクラスターもそうすることができました。

パイオニアであるSeti @ home、Einstein @ home、World Community Grid、distributed.netなどの**多くの成功した科学プロジェクトでは、特定の作業負荷のために、大きなコンピューティングクラスタを購入またはレンタルする代わりにボランティアコンピューティングが実行可能であることがわかりました。**
これらのプロジェクトの主な動機は、古典的な計算雲と**比較してコストが安いことです[1]。**
主なアイデアは個人の手で利用可能なコンピューティングパワーを利用することでしたが、**最近では、タブレットやスマートフォンなどのモバイルデバイスは、PCの市場突破に追い付く勢いだ。

この論文では、現在のモバイルコンピューティングプラットフォームが十分に強力になっており、**今日のボランティアコンピューティングプロジェクトに負荷をかけているような計算集中型タスクの実行可能なコンピューティングリソースと見なすことができるほど広く普及していると主張しています。**

**これらのデバイスにはWiFiが搭載されているため、適度な待ち時間で十分な帯域幅を提供するため、アドホックコンピューティングの雲を形成するためのすべての要素があります。**

**本書の残りの部分では、モバイルデバイスの計算リソースを使用することが合理的ないくつかのシナリオを提案**して、セクションIIから始めます。

セクションIIIは、**モバイルコンピューティングのための技術の現在の状態と発展について**概説する。

我々は、第IV節で、**通常のAndroid携帯電話を使用して小さなMPIクラスタを実装し、評価するフィージビリティスタディ**を提示します。

#2. A PPLICATIONS

一般的に、携帯電話の普及率は、PCよりもはるかに高い。
2010年にスマートフォンの出荷台数が初めてPC出荷台数を上回った[2]。
**以下では、モバイルクラウドのためのいくつかのビジョンアプリケーションを提示します。モバイルクラウドは、協力して計算上の問題を解決するためにアドホックでオンデマンドに確立することができます。
さらに、冒頭で述べた既存のボランティア・コンピューティング・プロジェクトも、確実にモバイル機器に移植することができます。**

##A. Rolling Clouds
モバイルコンピューティングクラウドの特別な形成が理にかなっている列車を例に挙げてみましょう：ほとんどの乗客は携帯電話を持っており、荷物の充電にはキャリッジのソケットを使用することができるため、エネルギーの消費は問題になりません。

たとえば、Siemens Velaro Dの高速列車の総容量は460人です。

2番目のクラスの運送車は76席あります。

キャリッジ内では、モバイルデバイスは、Wi-Fiを使用するMPI [3]などの原則に基づいて動作する密接に結合されたコンピューティングクラウドを容易に形成することができる。

コミュニケーションの制約から、BOINC [4]のような現在の一般的な分散コンピューティングプラットフォームと同様に、疎結合分散システムのアーキテクチャ上に列車全体を含むコンピューティングクラウドを構築する必要があります。:**タスクをデバイス（またはこのシナリオで密接に結合されたサブクラウド）にディスパッチし、結果をバックエンドに集約します。**
乗客にインターネットアクセスを提供するための最新の**列車にすでに組み込まれているWiFiインフラストラクチャを使用して、乗り物間の通信を容易にすることができます。**

近い将来、電車に乗るときは、携帯電話を接続します。

**あなたの携帯電話が充電している間、それは仲間の旅行者のデバイスとモバイルクラウドを形成します。**

対向列車は、この列車の目的地に設置された公共のセンシングシステムから環境データを送信する。

**アドホック・コンピューティング・クラウドは、このデータを使用して、目的地の気象およびオゾン濃度を細かく予測します。**
列車を出る前に、あなたのレインコートを着て、あなたの装置が重い爆発を予想していると警告したためです。

##B. Corporate Environments
私たちの電話機がスマートになればなるほど、電池の消耗は少なくなります。毎日何百万人ものオフィスワーカーがキュービクルに入り、PCにスイッチを入れ、専用電話をつなぎます。

雇用者は、これを容認し、電力を払うか、または禁止することができます。

禁止する問題は次のとおりです。「電気を盗む」ために従業員を解雇すると、それを強制することは困難であり、確かに良い宣伝はできません。


現在、雇用主として、あなたは闘うことができます。会社のコンピューティングクラウドに寄与するすべてのプライベートデバイスは請求されます。
**ソフトウェアショップでは、distccをモバイルデバイスに展開するのは非常に簡単です。**

**distccは分散型コンパイラフレームワークです。大規模なソフトウェアプロジェクトをコンパイルすると、コンパイルユニットが異なるコンパイルノードにディスパッチされ、オブジェクトファイルが後でビルドを開始したホストに集約されます。**

大きなプロジェクトをコンパイルする場合は、携帯電話でファイルをコンパイルするのに5秒かかることがあり、開発者のワークステーションは0.5秒でコンパイルできます。

ビルドプロセス全体が5秒以上かかるので、多くの異なるノードに配布することで時間を節約できます。
**したがって、従業員は電力を盗むのではなく、自らの専用設備を持って生産性を上げることになります。**

##C. Cooperative Cracking(協調クラッキング)
Moxie MarlinspikesツールWPACrackerは、Amazonクラウドで動作する400 CPUクラスターを使用します。

Black Hat DC 2011では、Thomas Rothが合理的な時間内にWPA暗号化を解読できるクラウドクラッキングスイート（CCS）を成功裏に実演しました。

**モバイルデバイスの計算能力をローカルに組み合わせることで、現場でWLAN暗号化を解読するために必要な電力が得られます。**

十分な数のスマートフォンを使用してリソースを共有し、分散攻撃を調整する機能と組み合わせることで、ブルートフォースベースの侵入の時間が大幅に短縮されます。
これは一部の国では違法かもしれないことに注意してください。

#3. MOBILE COMPUTING HARDWARE EVOLUTION
経験則として、汎用コンピューティングによるすべてのアーキテクチャ上の改良は、**現在の技術がモバイルデバイスで利用可能な電力範囲内で実装できるようになるとすぐに、モバイル市場に到着します。**

唯一の、モバイルスペース開発では、より高速です。
**最近では、スマートフォンやタブレット部門の好況により、モバイルプラットフォームが急速に進化しており、汎用アーキテクチャのリードが減少しています。**
今日のハイエンドモバイルデバイスは、デュアルコアおよびクアッドコアSoC構成を可能にするCortex A9を実装しており、スーパースカラのデュアルイシューで完全にアウトオブオーダーの設計になっています。

モバイルコンピューティングSoCの市場は非常に競争が激しい：
ARMコアに基づくSoCの競争だけでなく、コア自体にも激しい競争が存在するだけでなく、ARMアーキテクチャライセンシーは、ARMのCortexデザインと競合する互換性のあるコアアーキテクチャを提供します。

現代のモバイルGPUはすべて、OpenGL ES 2.0をサポートしています。これは、組み込みシステム用のOpenGLバリアントです。
**デスクトップ上のGPGPUコンピューティングを活用してモバイルプラットフォームに適用するエクスペリエンスが可能になります。**

**私たちは、Androidマーケットで利用可能なLINPACKベンチマークを使用して、ラボで利用可能なさまざまなAndroidデバイスのパフォーマンスを測定しました1。
表Iは結果をまとめたものである。**

**絶対値はそれほど興味深いわけではありませんが、パフォーマンスの変化が現在モバイルSoC市場で目にすることができる急速なアーキテクチャ革新を反映していることを指摘したいと思います。**
**モバイルデバイスの現在の状態のこの短い概観は、小型モバイルデバイスで利用可能なコンピューティングパワーが数年前にハイエンドワークステーションのコンピューティングパワーを既に超えており、現在のローエンドが支配するエリアに急速に移行していることを示しています。 グラフィックス領域）ミッドレンジ固定コンピューティング。**

#4. FEASIBILITY STUDY
現在利用可能なハードウェアとソフトウェアを使用してAndroidクラスターを構築することが可能であることを実証するために、6個のAndroidノードを持つ小規模な概念実証クラスターを構築しました。

**もちろん、ARMノード[6]から計算クラスタを構築することは可能ですが、私たちの目標は最小限に侵入することです。
インストールされているAndroidシステムを大幅に変更したり、置き換えたりすることは望ましくありません。**
分散コンピューティングソリューションがモバイルシステムに導入される場合、Androidシステムと並行して実行でき、デバイスの主要機能を妨げないことが重要です。
計算を分散するために、MPIライブラリに基づくL INPACK実装を使用します。
メッセージパッシングインタフェース（MPI）[3]は、分散システムにおける並列計算におけるメッセージ交換を記述する標準である。
MPIアプリケーションは、分散コアまたは分散システムで並列に実行される通信プロセスで構成されます。
**並列プロセスは、通常、同じ問題を処理しており、メッセージを交換している。 TCPを介して。**

**A.Test Environment**

root化された電話は、シェルへのアクセスを取得し、debootstrapによってインストールされたDebianベースのシステムにchrootすることができます。
この方法を使用すると、電話に既にインストールされているソフトウェアに干渉しないことに注意してください。
Androidシステムはちょうど正常に使用できます。
Debianのユーザランドは、電話がブートされたのと同じカーネルの下で動作します。

**Debianシステムでは、実際のMPIベースのL INPACK実装であるMPIライブラリとHPLをインストールしました。**

**私たちはSSHサーバもインストールしたので、電話機はネットワーク上で快適に設定できました**
（スマートフォン部門のすべての進歩があっても、実際のキーボードを使用することは2インチの仮想キーボードでシェルコマンドを入力するよりもずっと快適です）。

**B. Test Setup**
**MPIアプリケーションでは通常、ノード間の低レイテンシリンクを使用しますが、携帯電話では唯一現実的に利用できるオプションはWiFiです。**
単一のアクセスポイントで追加ルータがなければ、これは理論的に1024ノードまでのクラスタリングを可能にします（これはIEEE 802.11のネットワーク割り当ての制限に起因します。

実際のシナリオでは、WiFiテザリングが可能なすべてのAndroid端末がアクセスポイントとして動作できるため、このアクセスポイントはAndroid搭載端末によって提供されている可能性があります。

**WiFi接続は最も信頼できるリンクではありません。**特に、研究所の非常に混雑した2.4GHz帯（P500は5GHz WiFiをサポートしていません）を参考にして、
電話機をUSB経由でPCに接続すると、各電話機の仮想イーサネットインターフェイスがホスト上に確立されます。

**このUSBイーサネット接続を使用し、PC上でルーティングを手動で設定しました。 したがって、クラスタ内のすべての電話機は、有線接続によって互いに通信することができました。**

DroidClusterの設定は図1に示されています。
**WiFiとUSBリンクを介して1〜6ノードのL INPACKベンチマークを実行します。 使用されているHPLinpack構成ファイルは、著者が要求することができます。**

この実験では、最適なリンクに満たないにもかかわらず、クラスタが6ノードまで合理的にうまくスケールされることが示されています。

**USBリンクはWiFiリンクよりもわずかに優れていますが、WiFiクラスタは6ノードの最適値（非現実的な線形スケーリングを仮定）の75％に達します。**
USB構成における5つのノードの小さな溝は、システム全体を引き継ぐのではなく、通常のシステムの操作と並行して計算を実行することが目的であるため、HPLベンチマークが通常の優先順位で実行されたためです。

#5 C ONCLUSIONS

モバイルコンピューティングプラットフォームにおける現在の進化は、デスクトップ世界の発展に伴い、より速いペースでしか進まない。 モバイルコンピューティングプラットフォームの革新は、非常に競争の激しい市場と、モバイルコンピューティングとデスクトップコンピューティングの間に位置するタブレットが急速に採用され、常に最高のパフォーマンスを追求していることによってもたらされます。
今日のモバイルコンピューティングプラットフォームは、数年前からワークステーションの計算能力を上回っています。
私たちは今日のAndroidシステムがPCのようなものであることを示す小さなフィージビリティスタディを実装して、静止したコンピューティングの世界から標準的なツールやメカニズムを簡単に配備して計算タスクをうまく配布できるようにしました。
私たちは、このやや粗雑な方法を使用しても、実行中のAndroidシステムやアプリケーションに干渉しない方法で、Androidデバイスを分散クラスタに統合することが可能であることを示しました。

**私たちは、将来、モバイルコンピューティングの世界における特別な課題に適応した分散コンピューティングフレームワークが開発されることを完全に期待しています。**

**制限があるのは、CPU集中型アプリケーションをバッテリで実行することは、ほとんどの場合は良いアイデアではありませんが、デバイスを充電しているときに使用できるアプリケーションがあることがわかりました。(A limitation is that it is mostly not a good idea to run CPU intensive applications on battery, but as we have shown there are applications which can be used when the devices are charging anyway.)**

また、モバイルアドホッククラウドは環境に優しいと考えています。実行中の計算では余分なエネルギーを使用しますが、ハードウェアがより多く利用されることも意味します。

デバイスがその寿命中に消費するエネルギー量は、生産に投入されるエネルギーに比べて無視できる程度です。

**モバイルプラットフォームが進化し続けるにつれて、これらのマシンから収穫できる「ワット当たりの計算」は、まもなく固定コンピュータの場合と同じくらい高くなると予想されます。**

次に、特定のアプリケーションでは、複数のモバイルデバイスが、固定されたサーバーを組み合わせたアイドルタイムを寄付することで、環境的にもコスト的にも大きな利点となる状況が発生します。(Then we have the situation where, for certain applications, a bunch of mobile devices **can replace a stationary server by donating their combined idle times**, which is a real benefit in an environmental as well as in a cost sense.)
