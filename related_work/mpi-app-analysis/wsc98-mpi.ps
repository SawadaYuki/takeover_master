%!PS-Adobe-3.0%%Title: (Microsoft Word - prakash.doc)%%Creator: (Microsoft Word: LaserWriter 8 8.5.1)%%CreationDate: (11:53 AM Thursday, July 16, 1998)%%For: (Monnica Terwilliger)%%Pages: 8%%DocumentFonts: Informal Times-Bold Times-Roman Arial-BoldMT Courier Times-Italic ArialMT ArialNarrow Chicago%%DocumentNeededFonts: Informal Times-Bold Times-Roman Arial-BoldMT Courier Times-Italic ArialMT ArialNarrow Chicago%%DocumentSuppliedFonts:%%DocumentData: Clean7Bit%%PageOrder: Ascend%%Orientation: Portrait%%DocumentMedia: Default 612 791.76 0 () ()%ADO_ImageableArea: 30 32.88 582 760.8%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaultsuserdict/dscInfo 5 dict dup begin/Title(Microsoft Word - prakash.doc)def/Creator(Microsoft Word: LaserWriter 8 8.5.1)def/CreationDate(11:53 AM Thursday, July 16, 1998)def/For(Monnica Terwilliger)def/Pages 8 defend put/md 216 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if%%BeginFile: lw8_basic-2.3%%Copyright: Copyright 1990-1997 Adobe Systems Incorporated and Apple Computer Incorporated. All Rights Reserved./bd{bind def}bind def/xdf{exch def}bd/xs{exch store}bd/ld{load def}bd/Z{0 def}bd/T/true/F/false/:L/lineto/lw/setlinewidth/:M/moveto/rl/rlineto/rm/rmoveto/:C/curveto/:T/translate/:K/closepath/:mf/makefont/gS/gsave/gR/grestore/np/newpath14{ld}repeat/framewidth -1 def/QDframwid -1 def/numframes Z/mTS matrix def/$m matrix def/av 85 def/por T def/normland F def/psb-nosave{}def/pse-nosave{}def/us Z/psb{/us save store}bd/pse{us restore}bd/level2/languagelevel where{pop languagelevel 2 ge}{F}ifelsedef/level3/languagelevel where{pop languagelevel 3 ge}{F}ifelsedef/odictstk Z/oopstk Z/fcl{count oopstk sub dup 0 gt{{pop}repeat}{pop}ifelsecountdictstack odictstk sub dup 0 gt{{end}repeat}{pop}ifelse}bd/sfcl2{/odictstk countdictstack storecount/oopstk xs}bd/efcl2{stopped{$error/newerror F put}iffcl}bd/noload Z/startnoload{{/noload save store}if}bd/endnoload{{noload restore}if}bdlevel2 startnoload/setjob{statusdict/jobname 3 -1 roll put}bd/setcopies{userdict/#copies 3 -1 roll put}bd/devg/DeviceGray def/devr/DeviceRGB def/devc/DeviceCMYK def/ststpgdev{}def/dopgdev{}def/stpgdev{}def/buf Z/didstop T def/sfcl{/didstop T store/odictstk countdictstack storecount/oopstk xscurrentfile cvx stopped{$error/newerror F putdidstop{save/didstop xs/buf vmstatus exch sub exch pop dup 0 lt{pop 0}ifdup 64000 gt{pop 64000}if string store{currentfile buf readline{(}efcl)eq{exit}if}{/UnexpectedEOF errordict/rangecheck get exec}ifelse}loopdidstop restore}if}iffcl}bd/efcl{/didstop F storeexecstop}bdlevel2 endnoload level2 not startnoload/setjob{1 dict begin/JobName xdf currentdict end setuserparams}bd/setcopies{1 dict begin/NumCopies xdf currentdict end setpagedevice}bd/devg[/DeviceGray]def/devr[/DeviceRGB]def/devc[/DeviceCMYK]def/setpagedevice where{pop/realstpgdev/setpagedevice ld}if/SC_topddict Z/SC_spdict Z/dopgdev{md/setpagedevice undefSC_topddict realstpgdev}bd/stpgdev{SC_topddict dup 3 -1 roll{SC_spdict 2 index known{SC_spdict 2 index getdup 3 -1 roll{put dup}forallpop put dup}{put dup}ifelse}forallpop pop}bd/ststpgdev{md/setpagedevice/stpgdev load put/SC_topddict 0 dict store/SC_spdict 3 dict begin/InputAttributes 0 dict def/Policies 0 dict def/OutputAttributes 0 dict defcurrentdictendstore}def/sfcl/sfcl2 ld/efcl/efcl2 ldlevel2 not endnoload/pm Z/mT Z/sD Z/realshowpage Z/initializepage{mT $m currentmatrix mTS concatmatrix pop/pm save store mT concat}bd/endp{pm restore}bd/adjRect{dup 2 mul 6 2 roll4 index sub exch 5 -1 roll sub exch4 2 roll4 index add exch 5 -1 roll add exch4 2 roll}bd/frame1up{gSmTS setmatrixQDframwid lw/setstrokeadjust where{pop T setstrokeadjust}ifclippath pathbbox2 index sub exch3 index sub exchcurrentlinewidth framewidth muladjRectnumframes dup 0 lt{pop 0}if{4 copyrScurrentlinewidth framewidthmul 4 muladjRect}repeatpop pop pop popgR}bd/$c devr def/rectclip where{pop/rC/rectclip ld}{/rC{np 4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:Kclip np}bd}ifelse/rectfill where{pop/rF/rectfill ld}{/rF{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rlfillgR}bd}ifelse/rectstroke where{pop/rS/rectstroke ld}{/rS{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:KstrokegR}bd}ifelse%%EndFilelevel3 startnoload%%BeginFile: lw8_safeclipL12-1.0					/rectclip where{pop/rCa/rectclip ld}{/rCa{np 01 index length 4 idiv{2 copy4 getintervalaload pop4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:K4 add}repeatclip nppop pop}bd}ifelse/savedstack Z/subsavedstack Z/execstring Z/saferCa{/execstring xs/odictstk countdictstack store/oopstk 0 storecount 0 ne{savedstack 0 eq{count 100 gt{count}{100}ifelsearray/savedstack xs}{count savedstack length gt{count array/savedstack xs}if}ifelsecount savedstack 0 3 -1 rollgetintervalastore/subsavedstack xs}{/subsavedstack 0 store}ifelseexecstring cvx stopped{$error/newerror F putnewpath}iffclsubsavedstack 0 ne{subsavedstack aload pop}if}bd%%EndFilelevel3 endnoload level3 not startnoload%%BeginFile: lw8_safeclipL3-1.0	/saferCa/pop ld%%EndFilelevel3 not endnoload%%BeginFile: lw8_level1_colorspace-2.0/G/setgray ld/:F1/setgray ld/:F/setrgbcolor ld/:F4/setcmykcolor where{pop/setcmykcolor ld}{{3{dup3 -1 roll adddup 1 gt{pop 1}if1 exch sub4 1 roll}repeatpopsetrgbcolor}bd}ifelse/:Fx{counttomark{0{G}0{:F}{:F4}}exch getexecpop}bd/$cs Z/:rg{devr :ss}bd/:sc{$cs :ss}bd/:dc{dup type/arraytype eq{0 get}ifdup/DeviceCMYK eq{pop devc}{/DeviceGray eq{devg}{devr}ifelse}ifelse/$cs xdf}bd/:sgl{}def/:dr{}bd/:fCRD{pop}bd/:ckcs{}bd/:ss{/$c xdf}bd%%EndFile%%BeginFile: lw8_bubn-2.1/$t Z/$p Z/$s Z/$o 1. def/2state? F def/ps Zlevel2 startnoload/pushcolor/currentrgbcolor ld/popcolor/setrgbcolor ld/setcmykcolor where{pop/currentcmykcolor where{pop/pushcolor/currentcmykcolor ld/popcolor/setcmykcolor ld}if}iflevel2 endnoload level2 not startnoload/pushcolor{currentcolorspace $c eq{currentcolor currentcolorspace T}{currentcmykcolor F}ifelse}bd/popcolor{{setcolorspace setcolor}{setcmykcolor}ifelse}bdlevel2 not endnoload/pushstatic{2state?$o$t$p$s$csps}bd/popstatic{/ps xs/$cs xs/$s xs/$p xs/$t xs/$o xs/2state? xs}bd/pushgstate{currentpointpushcolorcurrentlinewidthcurrentlinecapcurrentlinejoincurrentdash exch aload lengthnp clippath pathbbox$m currentmatrix aload pop}bd/popgstate{$m astore setmatrix2 index sub exch3 index sub exchrCarray astore exch setdashsetlinejoinsetlinecaplwpopcolornp :M}bd/bu{errordict/nocurrentpoint{pop 0 0}put2state?{pushgstategR}ifpushgstategRpushgstatepushstaticpm restoremTS setmatrix}bd/bn{/pm save storepopstaticpopgstategSpopgstate2state?{gSpopgstate}if}bd/cpat{pop 64 div setgray 8{pop}repeat}bd%%EndFile%%BeginFile: lw8_basic_text-2.0/S/show ld/A{0.0 exch ashow}bd/R{0.0 exch 32 exch widthshow}bd/W{0.0 3 1 roll widthshow}bd/J{0.0 32 4 2 roll 0.0 exch awidthshow}bd/V{0.0 4 1 roll 0.0 exch awidthshow}bd/fcflg T def/fc{fcflg{vmstatus exch sub 50000 lt{(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg F store}if pop}if}bd/$f[1 0 0 -1 0 0]def/:ff{$f :mf}bd/MacEncoding StandardEncoding 256 array copy defMacEncoding dup 9/space put dup 39/quotesingle put 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacEncoding 128 128 getinterval astore poplevel2 startnoload/copyfontdict{findfont dup length dictbegin{1 index/FID ne{def}{pop pop}ifelse}forall}bd/$ckeyd md def/:skey{1 index maxlength 2 indexlength subge{begin/$mkeys 20 dict def/$mkeys loadenddup/$ckeyd xs}if3 1 roll put}bd/fD1pass{40$ckeyd//mdne{pop 1}if$ckeyd exch:skey}bd/:searchdict Z/:searchdict{exch 2 copyknown{get}{exch/$mkeysget:searchdict}ifelse}bd/lU{//md exch 2 copyknown{get}{exch/$mkeys get:searchdict}ifelse}bdlevel2 endnoload level2 not startnoload/copyfontdict{findfont dup length dictcopybegin}bd/fD1pass/def ld/lU/load ldlevel2 not endnoload/fD Z/sf Z/scf Z/sf1pass{lU setfont}bd/scf1pass{exch lU exch scalefont fD}bd/scf2pass{scalefont fD}bdmd/fontname known not{/fontname/customfont def}if/Encoding Z/:mre{copyfontdict/Encoding MacEncoding deffontname currentdictenddefinefont :ff fD}bd/:bsr{copyfontdict/Encoding Encoding 256 array copy defEncoding dup}bd/pd{put dup}bd/:esr{pop popfontname currentdictenddefinefont :ff fD}bd/ps Z/fz{/ps xs}bd/cF/currentfont ld/mbf{/makeblendedfont where{popmakeblendedfont/ABlend exch definefont}{pop}ifelsefD}def%%EndFile/currentpacking where {pop sc_oldpacking setpacking}if end%%EndProlog%%BeginSetupmd begin/fD/def ld/sf/setfont ld /scf/scf2pass ldsfcl{%%BeginFeature: *ManualFeed False	<</ManualFeed false>> setpagedevice%%EndFeature
}efcl
sfcl{%%BeginFeature: *PageSize Letter	<</DeferredMediaSelection true /PageSize [612 792] /ImagingBBox null>> setpagedevice%%EndFeature
}efcl
sfcl{%%BeginFeature: *Duplex None    <</Duplex false>> setpagedevice%%EndFeature
}efcl
sfcl{%%BeginFeature: *Smoothing None << /PostRenderingEnhance true     /PostRenderingEnhanceDetails << /REValue 0 /Type 8 >> >>  setpagedevice%%EndFeature
}efcl
(Monnica Terwilliger)setjobsfcl{/currentdistillerparams where{pop 1 dict dup/Orientation 2 put setpagedevice}if
}efcl
/mT[.24 0 0 -.24 30.001 760.817]def/sD 16 dict def 600 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse%%IncludeFont: Informal/f44/Informalfindfont :ff fD/f59 f44 37 scf%%IncludeFont: Times-Bold/f82/Times-Bold:mre/f98 f82 41 scf%%IncludeFont: Times-Roman/f113/Times-Roman:mre/f130 f113 41 scf%%IncludeFont: Arial-BoldMT/f153/Arial-BoldMT:mre/f170 f153 41 scf%%IncludeFont: Courier/f194/Courier:mre/f209 f194 41 scf%%IncludeFont: Times-Italic/f224/Times-Italic:mre/f241 f224 41 scf%%IncludeFont: ArialMT/f256/ArialMT:mre/f271 f256 41 scf%%IncludeFont: ArialNarrow/f298/ArialNarrow:mre/f315 f298 41 scf/f330 f298 37 scf%%IncludeFont: Chicago/f354/Chicagofindfont :ff fD/f369 f354 41 scf/Courier findfont[10 0 0 -10 0 0]:mf setfont%%EndSetup%%Page: 1 1%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 1 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 1 of )S2223 3011 :M(8)S408 209 :M0 Gf98 sf.021 .002(MPI-SIM: USING PARALLEL SIMULATION TO EVALUATE MPI PROGRAMS)J1009 353 :Mf130 sf(Sundeep Prakash)S993 402 :M(Rajive L. Bagrodia)S953 498 :M.014 .001(University of California)J897 546 :M(Computer Science Department)S885 594 :M.011 .001(Los Angeles, CA 90095, U.S.A.)J145 787 :Mf98 sf.007(ABSTRACT)A145 883 :Mf130 sf2.817 .282(This paper describes the design and implementation of)J145 931 :M6.304 .63(MPI-SIM, a library for the execution driven parallel)J145 979 :M7.971 .797(simulation of MPI programs. MPI-LITE, a portable)J145 1027 :M8.609 .861(library that supports multithreaded MPI is also de-)J145 1075 :M2.646 .265(scribed. MPI-SIM, which is built on top of MPI-LITE,)J145 1123 :M1.901 .19(can be used to predict the performance of existing MPI)J145 1171 :M4.49 .449(programs as a function of architectural characteristics)J145 1220 :M4.395 .44(including number of processors and message comm)J1041 1220 :M(u)S1062 1220 :M(-)S145 1268 :M4.281 .428(nication latencies. The simulation models can be exe-)J145 1316 :M2.928 .293(cuted sequentially or in parallel. Parallel executions of)J145 1364 :M1.989 .199(MPI-SIM models are synchronized using a set of asy)J1041 1364 :M(n)S1062 1364 :M(-)S145 1412 :M9.702 .97(chronous conservative protocols. MPI-SIM reduces)J145 1460 :M2.617 .262(synchronization overheads by exploiting the communi-)J145 1508 :M4.1 .41(cation characteristics of the program that it simulates.)J145 1556 :M3.78 .378(The paper presents validation and performance results)J145 1604 :M1.597 .16(from the use of MPI-SIM to simulate applications from)J145 1653 :M7.999 .8(the NAS Parallel Benchmark suite. Using the tech)J1061 1653 :M(-)S145 1701 :M3.08 .308(niques described in this paper, we were able to reduce)J145 1749 :M3.6 .36(the number of synchronizations in the parallel simula-)J145 1797 :M2.065 .206(tion as compared with the synchronous quantum prot)J1041 1797 :M(o)S1062 1797 :M(-)S145 1845 :M6.036 .604(col and were able to achieve speedups ranging from)J145 1893 :M1.747 .175(3.2-11.9 in going from sequential to parallel simulation)J145 1941 :M.011 .001(using 16 processors on the IBM SP2.)J145 2052 :Mf98 sf(1)Sf170 sf( )S201 2052 :Mf98 sf.007(INTRODUCTION)A145 2142 :Mf130 sf5.714 .571(Simulators for parallel programs can be used to test,)J145 2190 :M1.339 .134(debug and predict the performance of parallel programs)J145 2238 :M7.14 .714(for a variety of parallel architectures. Most existing)J145 2286 :M3.855 .385(simulators \()J348 2286 :M5.565 .557(Brewer et )J535 2286 :M5.656 .566(al 1991, Davis et )J855 2286 :M5.371 .537(al 1991, Co)J1061 2286 :M(-)S145 2334 :M2.072 .207(vington et al 1991\) use direct execution to simulate the)J145 2382 :M3.687 .369(sequential blocks of code, and simulate only the co)J1030 2382 :M(m)S1062 2382 :M(-)S145 2430 :M3.377 .338(munication and/or I/O events. As sequential execution)J145 2479 :M2.073 .207(of such models \()J427 2479 :M1.823 .182(Legedza and Weihl 1996, Reinhardt et)J145 2527 :M5.896 .59(al 1993, )J304 2527 :M5.6 .56(Dickens et al 1994, )J663 2527 :M5.166 .517(Dickens et al 1996\))J1007 2527 :M6.357 .636( are)J145 2575 :M1.625 .163(typically slow \(slowdown factors of 2 to 15 per proce)J1046 2575 :M(s)S1062 2575 :M(-)S145 2623 :M1.699 .17(sor are not atypical\), several researchers have used pa)J1048 2623 :M(r)S1062 2623 :M(-)S145 2671 :M2.519 .252(allel execution of such models with varying degrees of)J145 2719 :M2.661 .266(success. The primary difficulty in obtaining better pe)J1048 2719 :M(r)S1062 2719 :M(-)S145 2767 :M1.678 .168(formance is the significant synchronization overhead in)J145 2815 :M(the par)S258 2815 :M(allel simulator.)S1270 787 :M3.969 .397(In this paper we explore the use of a novel conse)J2128 787 :M(r)S2142 787 :M(-)S1225 835 :M5.854 .585(vative synchronization algorithm for)Jf209 sf1.584 .158( )J1890 835 :Mf130 sf4.028 .403(parallel simula-)J1225 883 :M5.931 .593(tion of message passing parallel programs. We com)J2142 883 :M(-)S1225 931 :M2.066 .207(bine the existing null message \(Misra 1986\) and condi-)J1225 979 :M8.63 .863(tional event \(Chandy and Sherman 1989\) protocols)J1225 1027 :M8.456 .846(together with a number of optimizations to signifi-)J1225 1075 :M5.395 .54(cantly reduce the frequency and cost of synchroniza-)J1225 1123 :M4.818 .482(tions in the parallel simulator. The optimized simula-)J1225 1171 :M7.908 .791(tion protocol has been incorporated in a simulation)J1225 1220 :M5.053 .505(library for MPI \(MPI Forum 1993\), called MPI-SIM.)J1225 1268 :M1.816 .182(An existing MPI program may be linked with the MPI-)J1225 1316 :M4.145 .414(SIM library \(after an appropriate pre-processing stage)J1225 1364 :M2.33 .233(described subsequently\) to predict its performance as a)J1225 1412 :M5.221 .522(function of the desired architectural characteristics; a)J1225 1460 :M2.841 .284(programmer is not required to make any modifications)J1225 1508 :M3.959 .396(to the original MPI program. This paper also presents)J1225 1556 :M7.382 .738(the results of an experimental study to evaluate the)J1225 1604 :M4.086 .409(utility of MPI-SIM in the simulation of the NAS Pa)J2128 1604 :M(r)S2142 1604 :M(-)S1225 1653 :M(allel Benchmark Suite.)S1225 1763 :Mf98 sf(2)Sf170 sf( )S1281 1763 :Mf98 sf.02 .002(MPI SIMULATION MODEL)J1225 1856 :M(2.1)S1275 1856 :Mf170 sf( )S1345 1856 :Mf98 sf.015 .001(MPI Overview and Core Functions)J1225 1943 :Mf130 sf5.598 .56(MPI \(MPI Forum 1993\) )J1664 1943 :M5.009 .501(is a message passing library)J1225 1991 :M7.844 .784(which offers a host of point-to-point and collective)J1225 2039 :M2.059 .206(interprocess communication functions to a set of single)J1225 2087 :M2.343 .234(threaded processes executing in parallel. All communi-)J1225 2135 :M5.323 .532(cation is performed using a )Jf98 sf1.933(communicator)Af130 sf2.568(\321which)A1225 2183 :M2.856 .286(describes the group of communicating processes. Only)J1225 2231 :M9.034 .903(member processes may use a given communicator.)J1225 2280 :M1.604 .16(This paper assumes that the program does not have any)J1225 2328 :M3.639 .364(I/O commands; simulation of the I/O constructs is d)J2124 2328 :M(e-)S1225 2376 :M3.592 .359(scribed in )J1407 2376 :M3.535 .354(Bagrodia et al \(1997\). In the subset of MPI)J1225 2424 :M7.449 .745(we simulate, all collective communication functions)J1225 2472 :M4.77 .477(are implemented in terms of point-to-point communi-)J1225 2520 :M3.159 .316(cation functions, and all point-to-point communication)J1225 2568 :M6.936 .694(functions are implemented using a set of )Jf241 sf2.769(core)A2058 2568 :Mf130 sf8.704 .87( non-)J1225 2616 :M7.488 .749(blocking MPI functions. The core functions include)J1225 2665 :M23.276 2.328(MPI_Issend, a )J1549 2665 :Mf241 sf16 1.6(non-blocking synchronous send)J2145 2665 :Mf130 sf(,)S1225 2713 :M3.634 .363(MPI_Ibsend, a )J1489 2713 :Mf241 sf2.662 .266(non-blocking buffered send)J1950 2713 :Mf130 sf5.43 .543(, )J1977 2713 :M(MPI_Irecv)S1225 2761 :Mf241 sf(non-blocking receive)S1570 2761 :Mf130 sf( and )S1650 2761 :M(MPI_Wait.)S1270 2809 :M1.513 .151(The )J1346 2809 :M1.064 .106(primary difference between )J1815 2809 :M1.46 .146(the two )J1951 2809 :M1.415 .141(sends is )J2094 2809 :M(that)S1225 2857 :M1.485 .149(the synchronous send )J1595 2857 :M1.301 .13(completes )J1774 2857 :M1.702 .17(only when )J1961 2857 :M1.182 .118(the receiver)Jendpshowpage%%Page: 2 2%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 2 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 2 of )S2223 3011 :M(8)S145 209 :M0 Gf130 sf1.67 .167(has accepted )J369 209 :M1.814 .181(the message using a )J717 209 :M1.445 .144(matching receive; )J1025 209 :M(the)S145 257 :M4.163 .416(buffered send )J394 257 :M4.379 .438(completes as soon )J723 257 :M5.716 .572(as )J773 257 :M4.893 .489(the data )J926 257 :M5.276 .528(has )J998 257 :M(been)S145 305 :M5.816 .582(copied to a )J359 305 :M5.299 .53(local )J457 305 :M4.694 .469(buffer. )J586 305 :M6.115 .611(The )J668 305 :M5.31 .531(buffer space is )J941 305 :M(released)S145 353 :M2.089 .209(only when the data )J478 353 :M2.336 .234(has )J546 353 :M2.162 .216(been )J637 353 :M1.787 .179(transmitted to )J880 353 :M1.45 .145(the receiver)J145 402 :M3.268 .327(via a synchronous send. )J568 402 :M2.762 .276(Each point-to-point MPI mes)J1062 402 :M(-)S145 450 :M3.006 .301(sage carries a )J389 450 :Mf241 sf1.225(tag)Af130 sf.719 .072( )J456 450 :M1.436 .144(and the )Jf241 sf.6(sender-id)A748 450 :Mf130 sf3.22 .322(. A receive )J951 450 :M2.929 .293(may be)J145 498 :M3.161 .316(selective, )J316 498 :M3.869 .387(accepting a message )J680 498 :M4.213 .421(only from a given sen)J1062 498 :M(-)S145 546 :M2.026 .203(der and/)J282 546 :M2.87 .287(or )J330 546 :M2.455 .246(with a given )J553 546 :M1.862 .186(tag. Alternately, )J836 546 :M2.642 .264(it may )J957 546 :M2.152 .215(use the)J145 594 :M30.421 3.042(wild card )J397 594 :M20.07 2.007(arguments MPI_ANY_SOURCE )J1041 594 :M(or)S145 642 :M4.781 .478(MPI_ANY_TAG to indicate that a )J762 642 :M4.784 .478(message from )J1016 642 :M(any)S145 690 :M1.974 .197(source process )J402 690 :M2.443 .244(or with any )J608 690 :M2.383 .238(tag value is )J815 690 :M1.388 .139(acceptable. The)J145 738 :M1.549 .155(wait )J228 738 :M1.806 .181(is )J268 738 :M1.375 .138(simply a function which )J684 738 :M1.229 .123(blocks the process until)J145 787 :M3.995 .4(the specified non-blocking \(send )J720 787 :M3.6 .36(or receive\) operation)J145 835 :M(has )S210 835 :M(completed.)S190 883 :M7.007 .701(In )J243 883 :M5.425 .543(this paper, )J441 883 :M6.304 .63(we use the )J649 883 :M5.258 .526(terms Target )J884 883 :M4.435 .444(Program to)J145 931 :M4.451 .445(refer to the MPI )J444 931 :M3.403 .34(program whose performance )J944 931 :M4.608 .461(is to be)J145 979 :M1.528 .153(predicted, Target Machine )J597 979 :M1.84 .184(as the machine on which the)J145 1027 :M2.571 .257(target )J253 1027 :M2.169 .217(program executes, Simulator )J749 1027 :M2.571 .257(as the program that)J145 1075 :M2.22 .222(simulates )J315 1075 :M2.209 .221(execution )J489 1075 :M2.933 .293(of the target )J709 1075 :M2.482 .248(program )J863 1075 :M2.626 .263(on the target)J145 1123 :M4.508 .451(machine, and Host )J482 1123 :M4.156 .416(Machine )J643 1123 :M4.555 .456(as the machine on which)J145 1171 :M7.809 .781(the simulator )J396 1171 :M7.73 .773(executes. In general )J771 1171 :M9.2 .92(the host )J936 1171 :M(machine)S145 1220 :M2.103 .21(may )J229 1220 :M2.277 .228(be )J281 1220 :M1.639 .164(sequential or parallel. For )J723 1220 :M1.715 .171(direct )J830 1220 :M1.656 .166(execution, it )J1048 1220 :M(is)S145 1268 :M3.284 .328(important )J322 1268 :M4.448 .445(that )J400 1268 :M3.519 .352(the processor configurations in )J941 1268 :M3.669 .367(the host)J145 1316 :M(and target )S318 1316 :M(machine be )S516 1316 :M(similar.)S145 1415 :Mf98 sf(2.2)S195 1415 :Mf170 sf( )S265 1415 :Mf98 sf.016 .002(Preprocessing MPI programs for MPI-SIM)J145 1502 :Mf130 sf1.364 .136(In general, the host machine will have fewer processors)J145 1550 :M3.554 .355(than the target machine \(for sequential simulation, the)J145 1598 :M1.426 .143(host machine has only one processor\); this requires that)J145 1646 :M3.09 .309(the simulator provides the capability for multithreaded)J145 1694 :M2.397 .24(execution. As MPI programs execute as a collection of)J145 1742 :M4.225 .422(single threaded processes, it is necessary to provide a)J145 1790 :M8.943 .894(capability for multithreaded execution of MPI pro)J1061 1790 :M(-)S145 1839 :M4.356 .436(grams in MPI-SIM. We have developed MPI-LITE, a)J145 1887 :M9.401 .94(portable library to support multithreaded MPI pr)J1041 1887 :M(o)S1062 1887 :M(-)S145 1935 :M3.06 .306(grams. Executing an existing MPI program as a mult)J1051 1935 :M(i-)S145 1983 :M8.564 .856(threaded program requires additional modifications.)J145 2031 :M6.093 .609(The primary one deals with transforming the perm)J1044 2031 :M(a-)S145 2079 :M3.925 .392(nent variable, )Jf241 sf.737(i.e.)Af130 sf4.028 .403( global variables and static variables)J145 2127 :M7.169 .717(within functions. If the unmodified MPI program is)J145 2175 :M4.149 .415(executed as a multithreaded program, all threads on a)J145 2224 :M5.855 .585(given host process will access a single copy of each)J145 2272 :M3.954 .395(permanent variable. To prevent this, it is necessary to)J145 2320 :Mf241 sf.836(privatize)Af130 sf3.408 .341( the permanent variable such that each thread)J145 2368 :M1.611 .161(has a local copy. Each permanent variable is )J904 2368 :M(redeclared)S145 2416 :M1.774 .177(with an additional dimension whose size is equal to the)J145 2464 :M5.467 .547(maximum number of threads in a host process. Each)J145 2512 :M6.362 .636(reference to the permanent variable is also modified)J145 2560 :M2.19 .219(such that each thread uses its id to access its own copy)J145 2608 :M6.821 .682(of the permanent variable. This process of adding a)J145 2657 :M3.855 .385(dimension to the permanent variables is referred to as)J145 2705 :Mf98 sf1.248(privatization)Af130 sf4.774 .477(. A preprocessor is provided with MPI-)J145 2753 :M2.986 .299(SIM that automatically privatizes permanent variables,)J145 2801 :M3.019 .302(converts each MPI call to the corresponding MPI-SIM)J145 2849 :M8.861 .886(call, and implements miscellaneous transformations)J1225 209 :M3.444 .344(needed to link the program with the MPI-SIM library.)J1225 257 :M4.578 .458(In MPI-SIM the routines for inter-thread communica-)J1225 305 :M1.428 .143(tion are syntactically identical to those for inter-process)J1225 353 :M1.883 .188(communication except for the use of a special prefix to)J1225 402 :M(distinguish between the two.)S1225 500 :Mf98 sf(2.3)S1275 500 :Mf170 sf( )S1345 500 :Mf98 sf.018 .002(Simulation Model for Core Functions)J1225 588 :Mf130 sf1.277 .128(We present a model for execution and simulation of the)J1225 636 :M6.725 .672(four core functions. The simulation model defines a)J1225 684 :M2.683 .268(logical process \(LP\) for each process in the target pro)J2141 684 :M(-)S1225 732 :M2.433 .243(gram. Each LP, has a message queue for each commu)J2141 732 :M(-)S1225 780 :M7.98 .798(nicator of which the LP is a member, a simulation)J1225 828 :M2.782 .278(clock, and an ordered list \(ordered by simulation time-)J1225 876 :M2.646 .265(stamp\) of the pending \(send and receive\) operations of)J1225 924 :M2.301 .23(the LP; this list is referred to as the )Jf241 sf4.215 .422(request list)Jf130 sf3.168 .317(. Sim)J2120 924 :M(u)S2141 924 :M(-)S1225 973 :M5.886 .589(lation of a process in the target program by a corr)J2124 973 :M(e-)S1225 1021 :M3.964 .396(sponding LP in the simulator proceeds as follows: se-)J1225 1069 :M1.524 .152(quential code blocks are simulated via direct execution.)J1225 1117 :M3.079 .308(Each call to an MPI communication statement \(collec-)J1225 1165 :M2.995 .3(tive or point-to-point\) is translated to a call to the co)J2128 1165 :M(r)S2142 1165 :M(-)S1225 1213 :M9.834 .983(responding MPI-SIM function. MPI-SIM internally)J1225 1261 :M3.979 .398(implements each call to a collective function in terms)J1225 1309 :M8.704 .87(of the core communication commands described in)J1225 1357 :M3.27 .327(Section )J1364 1357 :M3.559 .356(2.1. For brevity, we do not describe the trans)J2142 1357 :M(-)S1225 1406 :M6.199 .62(lation in the paper; the reader is referred to Prakash)J1225 1454 :M3.583 .358(\(1996\). We briefly describe the simulation of the core)J1225 1502 :M(co)S1264 1502 :M(m)S1296 1502 :M(mands.)S1270 1550 :M2.439 .244(The sends in the MPI core are simulated by sending)J1225 1598 :M1.774 .177(a message \(with source, destination, tag, communicator)J1225 1646 :M2.196 .22(and data\) to the receiver LP. The message is timesta)J2110 1646 :M(m)S2142 1646 :M(-)S1225 1694 :M9.097 .91(ped with the send timestamp, which is the current)J1225 1742 :M1.326 .133(simulation time of the sending LP and )J1876 1742 :M1.193 .119(the receive tim)J2124 1742 :M(e-)S1225 1790 :M3.414 .341(stamp, which is the send timestamp plus the predicted)J1225 1839 :M1.487 .149(message latency. For buffered sends, the overheads and)J1225 1887 :M3.526 .353(functionality for buffer availability check are included)J1225 1935 :M2.926 .293(in the simulation. The simulation of )J1851 1935 :M1.895 .19(MPI_Irecv simply)J1225 1983 :M3.474 .347(adds a request to the request list. The action taken for)J1225 2031 :M1.626 .163(the wait depends on the type of the specified operation.)J1225 2079 :M2.56 .256(For instance, for wait on a receive operation, the LP is)J1225 2127 :M10.924 1.092(blocked until a matched message is available. Of)J1225 2175 :M4.426 .443(course, the LP must remove messages in the order of)J1225 2224 :M9.118 .912(their simulation timestamps and )Jf241 sf2.142(not)Af130 sf5.383 .538( in the order in)J1225 2272 :M3.984 .398(which messages are physically deposited in its queue.)J1225 2320 :M6.783 .678(When an appropriate matching message is removed,)J1225 2368 :M4.086 .409(the LP\325s simulation clock is updated to the maximum)J1225 2416 :M6.841 .684(of the current simulation time and the receive tim)J2124 2416 :M(e-)S1225 2464 :M2.339 .234(stamp of the matching message, an acknowledgment is)J1225 2512 :M2.491 .249(sent to the sender, and the LP is resumed. For the syn)J2141 2512 :M(-)S1225 2560 :M2.294 .229(chronous send operation, the LP blocks until the corr)J2124 2560 :M(e-)S1225 2608 :M3.386 .339(sponding acknowledgment has been received from the)J1225 2657 :M2.499 .25(destination. At this time, the simulation time of the LP)J1225 2705 :M5.317 .532(is updated to the maximum of the current simulation)J1225 2753 :M7.738 .774(time and the receive timestamp of the acknowledg)J2141 2753 :M(-)S1225 2801 :M(ment.)Sendpshowpage%%Page: 3 3%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 3 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 3 of )S2223 3011 :M(8)S145 208 :M0 Gf98 sf(3)Sf170 sf( )S201 208 :Mf98 sf.016 .002(PARALLEL EXECUTION OF MPI)J201 256 :M.029 .003(SIMULATION MODEL)J145 347 :Mf130 sf4.84 .484(Two types of protocols have commonly been used in)J145 395 :M5.539 .554(the parallel simulation of parallel programs: the syn)J1061 395 :M(-)S145 443 :M8.19 .819(chronous or quantum protocol \(e.g. )J803 443 :M6.572 .657(SimOS \(Rosen)J1062 443 :M(-)S145 491 :M1.964 .196(blum et al 1995, )J433 491 :M1.759 .176(Rosenblum et al 1997\)\), and the asy)J1041 491 :M(n)S1062 491 :M(-)S145 539 :M2.519 .252(chronous protocols \(e.g. LAPSE \()J719 539 :M2.679 .268(Dickens et al 1994\)\).)J145 588 :M10.274 1.027(In the synchronous protocol, each LP periodically)J145 636 :M7.036 .704(simulates its corresponding process for a previously)J145 684 :M6.812 .681(determined interval Q, termed the )J767 684 :Mf98 sf4.742 .474(simulation quan)J1062 684 :M(-)S145 732 :M(tum)S216 732 :Mf130 sf2.502 .25(, and then executes a global barrier. These barriers)J145 780 :M2.548 .255(are used to ensure that messages from remote LPs will)J145 828 :M6.134 .613(be accepted in their correct timestamp order. An LP)J145 876 :M6.266 .627(waiting at a receive will accept a matching message)J145 924 :M7.787 .779(from its buffer only if )J570 924 :Mf241 sf6.785 .679(the receive timestamp of the)J145 973 :M4.434 .443(message is less than the simulation time at which the)J145 1021 :M12.428 1.243(current quantum terminates)Jf130 sf6.398 .64(. If more that one such)J145 1069 :M2.925 .292(message is present, the LP will select the one with the)J145 1117 :M1.686 .169(earliest timestamp; if no such messages are present, the)J145 1165 :M2.182 .218(LP remains blocked, and its simulation time is updated)J145 1213 :M6.4 .64(to the end of the current quantum. The synchronous)J145 1261 :M8.621 .862(protocol is guaranteed to be accurate only if Q<L,)J145 1309 :M7.281 .728(where L is the communication latency of the target)J145 1357 :M10.188 1.019(architecture. However, a small Q implies frequent)J145 1406 :M5.247 .525(global synchronizations leading to poor performance.)J145 1454 :M<28>S159 1454 :M7.621 .762(If the host machine provides an efficient hardware)J145 1502 :M3.108 .311(implementation of global synchronization \(e.g., CM5\),)J145 1550 :M4.721 .472(it might be feasible to obtain good performance even)J145 1598 :M2.242 .224(with a small value of Q.\) )J582 1598 :M1.868 .187( Simulation efficiency can be)J145 1646 :M7.594 .759(improved by using a larger quantum)J804 1646 :M7.644 .764(; however with)J145 1694 :M8.331 .833(Q>L, it is no longer possible to guarantee that the)J145 1742 :M8.165 .816(simulator is accurate. Thus parallel simulators \(e.g.)J145 1790 :M8.449 .845(SimOS\) that use this protocol offer two simulation)J145 1839 :M.007 .001(modes: fast and inaccurate, or slow and accurate.)J190 1887 :M9.696 .97(MPI-SIM uses an asynchronous protocol)J936 1887 :M11.499 1.15(, which)J145 1935 :M6.116 .612(reproduces the communication ordering of the target)J145 1983 :M1.713 .171(program in the simulator. LPs have two attributes ass)J1041 1983 :M(o)S1062 1983 :M(-)S145 2031 :M14.312 1.431(ciated with them at all times: )J759 2031 :Mf98 sf8.619 .862(Execution Status)J145 2079 :Mf130 sf14.382 1.438(\(blocked, running or terminated\) and )J884 2079 :Mf98 sf(Simulation)S145 2127 :M4.296 .43(Status )Jf130 sf5.505 .55(\(deterministic or non-deterministic mode\). An)J145 2175 :M7.369 .737(LP is )J260 2175 :Mf98 sf(blocked)S397 2175 :Mf130 sf5.967 .597( if it has executed a receive statement)J145 2224 :M4.561 .456(and no matching message is available; otherwise it is)J145 2272 :M2.639 .264(said to be )Jf98 sf1.304(running)Af130 sf3.449 .345(. An LP is in deterministic mode )J1052 2272 :Mf241 sf(if)S145 2320 :M2.355 .235(every receive request in its request list explicitly speci-)J145 2368 :M29.016 2.902(fies the source \(i.e. no receive contains)J145 2416 :M3.571 .357(MPI_ANY_SOURCE as the source\))Jf130 sf2.385 .238(. Each LP executes)J145 2464 :M9.713 .971(without synchronizing with other LPs until it gets)J145 2512 :M8.705 .87(blocked on some wait operation; a synchronization)J145 2560 :M2.918 .292(protocol is used to decide if the LP can or cannot pro)J1061 2560 :M(-)S145 2608 :M6.166 .617(ceed with a message from its buffer. We briefly de-)J145 2657 :M(scribe our protocol.)S190 2705 :M7.912 .791(Each LP in the model computes a local quantity)J145 2753 :M1.386 .139(called its Earliest Input Time or )J689 2753 :Mf98 sf(EIT)S760 2753 :Mf130 sf1.371 .137( \(Jha and Bagrodia)J145 2801 :M6.444 .644(1993\). The EIT represents a lower bound on the r)J1044 2801 :M(e-)S145 2849 :M5.777 .578(ceive timestamp of future messages that the LP may)J1225 209 :M7.84 .784(receive. Consequently, upon executing a wait state-)J1225 257 :M1.973 .197(ment, an LP can safely select a matching message with)J1225 305 :M4.321 .432(a receive timestamp less than its EIT. Different asy)J2121 305 :M(n)S2142 305 :M(-)S1225 353 :M9.558 .956(chronous protocols differ only in their method for)J1225 402 :M4.918 .492(computing EIT. Our implementation supports various)J1225 450 :M3.257 .326(protocols including the )Jf241 sf4.062 .406(Null Message Protocol \(NMP\))J1225 498 :Mf130 sf<28>S1239 498 :M8.101 .81(Chandy )J1390 498 :M8.885 .889(and J. Misra 1979\), the )J1843 498 :Mf241 sf4.986 .499(Conditional Event)J1225 546 :M8.896 .89(Protocol \(CEP\))Jf130 sf4.77 .477( \(Chandy )J1680 546 :M8.89 .889(and )J1760 546 :M(Sherman)S1906 546 :M7.229 .723( 1989\),)J2034 546 :Mf241 sf2.2 .22( )Jf130 sf14.781 1.478(and a)J1225 594 :M2.397 .24(new protocol, which is a combination the two \(Jha )J2096 594 :M(and)S1225 642 :M8.479 .848(Bagrodia 1993\). Due to space limitations, we have)J1225 690 :M3.242 .324(omitted details of the protocol; the interested reader is)J1225 738 :M.016 .002(referred to Prakash \(1996\).)J1270 787 :M2.179 .218(The primary overhead in implementing parallel con)J2141 787 :M(-)S1225 835 :M7.171 .717(servative protocols is due to the communications to)J1225 883 :M4.042 .404(compute EIT and the blocking suffered by an LP that)J1225 931 :M6.117 .612(has not been able to advance its EIT. We have sug)J2141 931 :M(-)S1225 979 :M3.976 .398(gested and implemented a number of optimizations to)J1225 1027 :M2.731 .273(significantly reduce the frequency and strength of syn)J2141 1027 :M(-)S1225 1075 :M8.314 .831(chronization in the parallel simulator thus reducing)J1225 1123 :M8.388 .839(unnecessary blocking in its execution. The primary)J1225 1171 :M(optimizations include:)S1225 1220 :M4.274(1.)Af271 sf3.166 .317( )J1281 1220 :Mf98 sf5.538 .554(Automatic detection of deterministic fragments)J1281 1268 :M13.002 1.3(in the parallel program.)Jf130 sf7.903 .79( In general, an LP is)J1281 1316 :M11.016 1.102(blocked either if its buffer does not contain a)J1281 1364 :M4.001 .4(matching message or if the timestamp on the me)J2126 1364 :M(s)S2142 1364 :M(-)S1281 1412 :M3.536 .354(sage is greater than the LP\325s EIT. However, an LP)J1281 1460 :M1.835 .183(in the )Jf241 sf.796(deterministic)Af130 sf2.504 .25( mode can proceed as soon as it)J1281 1508 :M7.445 .744(finds a matching message, regardless of its EIT.)J1281 1556 :M2.114 .211(This is an optimization within the framework of the)J1281 1604 :M(null message protocol.)S1225 1653 :M3.25(2.)Af271 sf2.408 .241( )J1281 1653 :Mf98 sf5.484 .548(Reducing blocking time of an LP by exploiting)J1281 1701 :M5.478 .548(the communication characteristics of the appli-)J1281 1749 :M1.955(cation.)Af130 sf8.731 .873( By precisely defining potential message)J1281 1797 :M2.926 .293(sources, an LP can reduce the communications that)J1281 1845 :M(are used to advance its EIT.)S1225 1893 :M2.525(3.)Af271 sf1.871 .187( )J1281 1893 :Mf98 sf3.663 .366(Reducing the frequency of synchronization with)J1281 1941 :M6.039 .604(dynamic extraction of lookahead.)J1901 1941 :Mf130 sf7.657 .766( Lookahead is)J1281 1989 :M3.326 .333(the ability of an LP to predict lower bounds on fu)J2141 1989 :M(-)S1281 2038 :M3.927 .393(ture times at which it will )Jf241 sf1.44(generate)Af130 sf4.399 .44( a message for)J1281 2086 :M3.275 .327(other LPs. Extracting tight estimates for each com)J2142 2086 :M(-)S1281 2134 :M3.578 .358(municating partner leads to fewer synchronizations)J1281 2182 :M6.543 .654(than the commonly used static methods for co)J2110 2182 :M(m)S2142 2182 :M(-)S1281 2230 :M(puting lookahead.)S1225 2340 :Mf98 sf(4)Sf170 sf( )S1281 2340 :Mf98 sf(RESULTS)S1225 2433 :M(4.1)S1275 2433 :Mf170 sf( )S1345 2433 :Mf98 sf.006(Benchmarks)A1225 2520 :Mf130 sf7.196 .72(We have validated MPI-SIM, and measured its pe)J2128 2520 :M(r)S2142 2520 :M(-)S1225 2568 :M14.581 1.458(formance for the NAS \(Numerical Aerodynamic)J1225 2616 :M2.238 .224(Simulation\) Parallel Benchmarks \(NPB 2\) \(Bailey et al)J1225 2665 :M4.374 .437(1995\), a set of programs designed at the NASA NAS)J1225 2713 :M3.817 .382(program to evaluate supercomputers. The IBM-SP2 at)J1225 2761 :M6.564 .656(UCLA was selected as both the target and host m)J2124 2761 :M(a-)S1225 2809 :M2.169 .217(chines. Each node of the IBM-SP2 is a POWER2 node)J1225 2857 :M7.655 .765(with 128Kb of cache and 256Mb of main memory.)Jendpshowpage%%Page: 4 4%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 4 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 4 of )S2223 3011 :M(8)S145 659 :M0 Gf130 sf2.765 .276(Nodes are connected using a high performance switch,)J145 707 :M7.745 .774(which offers a point-to-point bandwidth of 40Mb/s,)J145 755 :M2.703 .27(and has a hardware latency of 500ns. The NPB bench)J1061 755 :M(-)S145 803 :M5.752 .575(marks are written in Fortran 77 with embedded MPI)J145 852 :M9.527 .953(calls for communication. Since MPI-SIM currently)J145 900 :M2.448 .245(supports privatization only for C programs, it was ne)J1044 900 :M(c-)S145 948 :M1.08 .108(essary to convert the benchmarks to C. We were able to)J145 996 :M9.16 .916(convert four out of the five benchmarks using f2c)J145 1044 :M<28>S159 1044 :M6.796 .68(Feldman et al 1990\), a Fortran-to-C converter. The)J145 1092 :M7.33 .733(specific configurations of the benchmarks that were)J145 1140 :M6.542 .654(used in the performance study were constrained pri-)J145 1188 :M3.566 .357(marily by their memory and CPU requirements. Table)J145 1237 :M6.648 .665(1 summarizes the relevant configuration information)J145 1285 :M2.554 .255(for the benchmarks. Each benchmark was executed for)J145 1333 :M4.215 .421(three target machine configurations. For example, LU)J145 1381 :M(was ex)S258 1381 :M(ecuted on 4, 8 and 16 processors.)S145 1480 :Mf98 sf(4.2)S195 1480 :Mf170 sf( )S265 1480 :Mf98 sf.02 .002(Verification & Validation)J145 1567 :Mf130 sf3.427 .343(The target programs and the simulators were executed)J145 1615 :M4.765 .476(for all processor configurations listed in Table 1. For)J145 1663 :M10.012 1.001(each target and host processor configuration, each)J1225 659 :M8.274 .827(simulator was executed in four modes described in)J1225 707 :M2.346 .235(Section 4.3. The NPB 2 benchmarks are self-verifying,)J1225 755 :M6.124 .612(meaning that each benchmark after completion co)J2110 755 :M(m)S2142 755 :M(-)S1225 803 :M2.544 .254(pares the computed results against )J1820 803 :M1.536 .154(precomputed results)J1225 852 :M1.668 .167(to ensure that it executed correctly. All target programs)J1225 900 :M.008 .001(and simulators were found to ver)J1766 900 :M(ify correctly.)S1270 948 :M7.77 .777(Figure 1 plots the target program execution time)J1225 996 :M3.499 .35(\(solid line\) and the execution time as predicted by the)J1225 1044 :M2.741 .274(simulator \(dashed lines\) as a function of various target)J1225 1092 :M7.272 .727(machine configurations; note that the simulator pr)J2124 1092 :M(e-)S1225 1140 :M7.695 .77(dicted times are plotted for each host configuration)J1225 1188 :M4.585 .458(listed in Table 1. The graphs were nearly identical in)J1225 1237 :M1.566 .157(all simulator modes, and consequently the figure shows)J1225 1285 :M3.653 .365(only one mode: the )J1572 1285 :M3.127 .313(NMP+CEP+Det mode. In the best)J1225 1333 :M2.773 .277(case the predicted and measured times differed by less)J1225 1381 :M4.786 .479(than 5% and in the worst by 20% lending reasonable)J1225 1429 :M(cred)S1296 1429 :M(ibility to the simulations.)S1225 1528 :Mf98 sf(4.3)S1275 1528 :Mf170 sf( )S1345 1528 :Mf98 sf.025 .002(Simulator Modes)J1225 1615 :Mf130 sf2.244 .224(A simulator can be executed in four modes. In three of)J1225 1663 :M7.843 .784(these the simulation status is non-deterministic, but)J1 G175 171 1980 450 rF209 186 1911 420 rC943 224 :M0 G(Table )S1047 224 :M(1)S1068 224 :M(: NAS )S1182 224 :M(Benchmarks)S950 302 :Mf315 sf(Target 1)S1381 302 :M(Target 2)S1823 302 :M(Target 3)S628 259 2 4 rF628 259 2 2 rF630 259 167 2 rF797 261 2 2 rF797 259 2 2 rF799 259 429 2 rF1228 261 2 2 rF1228 259 2 2 rF1230 259 428 2 rF1658 259 4 4 rF1658 259 4 4 rF1662 259 446 4 rF2108 259 4 4 rF2108 259 4 4 rF628 263 2 48 rF797 263 2 48 rF1228 263 2 48 rF1658 263 4 48 rF2108 263 4 48 rF215 311 150 47 rC243 350 :Mf330 sf(Names)SgRgS 367 311 130 47 rC393 350 :Mf330 sf(Lines)SgRgS 499 311 129 47 rC525 350 :Mf330 sf(Class)SgRgS 630 259 167 52 rC664 302 :Mf315 sf(Target)SgRgS 209 186 1911 420 rC665 346 :Mf330 sf(Procs)S743 346 :M(..)S983 354 :Mf315 sf(Target Program Size/Simulator Size \(Host Procs. for Simulator\))S209 313 6 2 rF209 311 6 2 rF215 311 2 2 rF217 311 147 2 rF364 311 2 2 rF365 313 2 2 rF365 311 2 2 rF367 311 129 2 rF496 311 2 2 rF497 313 2 2 rF497 311 2 2 rF499 311 129 2 rF628 311 2 4 rF796 311 4 4 rF796 311 4 4 rF800 311 4 4 rF804 311 424 4 rF1228 311 4 4 rF1232 311 426 4 rF1658 311 4 4 rF1662 311 446 4 rF2108 311 4 4 rF209 315 6 48 rF365 315 2 48 rF497 315 2 48 rF628 315 2 48 rF796 315 4 48 rF2108 315 4 48 rF215 363 150 52 rC264 405 :Mf130 sf(LU)SgRgS 367 363 130 52 rC389 405 :Mf130 sf(4623)SgRgS 499 363 129 52 rC543 405 :Mf130 sf( A)SgRgS 630 363 167 52 rC656 405 :Mf130 sf( 4,8,16)SgRgS 209 186 1911 420 rC865 405 :Mf130 sf( 14M/57M \(1,2,4\))S1311 405 :M( 8M/32M\(2,4,8\))S1742 405 :M( 5M/18M\(4,8,16\))S209 363 6 4 rF215 363 150 2 rF365 363 2 4 rF367 363 130 2 rF497 363 2 4 rF499 363 129 2 rF628 363 2 4 rF630 363 166 2 rF796 363 4 4 rF796 363 4 4 rF800 363 4 4 rF804 363 424 4 rF1228 363 4 4 rF1232 363 426 4 rF1658 363 4 4 rF1662 363 446 4 rF2108 363 4 4 rF209 367 6 48 rF365 367 2 48 rF497 367 2 48 rF628 367 2 48 rF797 367 2 48 rF1228 367 2 48 rF1658 367 4 48 rF2108 367 4 48 rF215 415 150 52 rC258 457 :M(MG)SgRgS 367 415 130 52 rC389 457 :Mf130 sf(2712)SgRgS 209 186 1911 420 rC546 457 :Mf130 sf( S)S630 415 167 52 rC656 457 :M( 4,8,16)SgRgS 209 186 1911 420 rC868 457 :Mf130 sf( 600K/8M \(1,2,4\))S1284 457 :M( 400K/5M \(1,2,4,8\))S1662 415 446 52 rC1700 457 :M( 300K/3M \(1,2,4,8,16\))SgRgS 209 186 1911 420 rC209 415 6 4 rF215 415 150 2 rF365 415 2 4 rF367 415 130 2 rF497 415 2 4 rF499 415 129 2 rF628 415 2 4 rF630 415 167 2 rF797 415 2 4 rF799 415 429 2 rF1228 415 2 4 rF1230 415 428 2 rF1658 415 4 4 rF1662 415 446 4 rF2108 415 4 4 rF209 419 6 48 rF365 419 2 48 rF497 419 2 48 rF628 419 2 48 rF797 419 2 48 rF1228 419 2 48 rF1658 419 4 48 rF2108 419 4 48 rF265 509 :Mf130 sf(BT)S367 467 130 52 rC389 509 :M(6290)SgRgS 209 186 1911 420 rC546 509 :Mf130 sf( S)S630 467 167 52 rC656 509 :M( 4,9,16)SgRgS 209 186 1911 420 rC875 509 :Mf130 sf( 2M/24M \(1,2,4\))S1291 509 :M( 1M/15M \(1,2,4,9\))S1662 467 446 52 rC1706 509 :M( 1M/12M \(1,2,4,9,16\))SgRgS 209 186 1911 420 rC209 467 6 4 rF215 467 150 2 rF365 467 2 4 rF367 467 130 2 rF497 467 2 4 rF499 467 129 2 rF628 467 2 4 rF630 467 167 2 rF797 467 2 4 rF799 467 429 2 rF1228 467 2 4 rF1230 467 428 2 rF1658 467 4 4 rF1662 467 446 4 rF2108 467 4 4 rF209 471 6 48 rF365 471 2 48 rF497 471 2 48 rF628 471 2 48 rF797 471 2 48 rF1228 471 2 48 rF1658 471 4 48 rF2108 471 4 48 rF268 561 :Mf130 sf(SP)S367 519 130 52 rC389 561 :M(5555)SgRgS 209 186 1911 420 rC546 561 :Mf130 sf( S)S630 519 167 52 rC656 561 :M( 4,9,16)SgRgS 209 186 1911 420 rC868 561 :Mf130 sf( 700K/7M \(1,2,4\))S1284 561 :M( 500K/6M \(1,2,4,9\))S1662 519 446 52 rC1700 561 :M( 500K/5M \(1,2,4,9,16\))SgRgS 209 186 1911 420 rC209 519 6 4 rF215 519 150 2 rF365 519 2 4 rF367 519 130 2 rF497 519 2 4 rF499 519 129 2 rF628 519 2 4 rF630 519 167 2 rF797 519 2 4 rF799 519 429 2 rF1228 519 2 4 rF1230 519 428 2 rF1658 519 4 4 rF1662 519 446 4 rF2108 519 4 4 rF209 523 6 48 rF209 571 156 2 rF365 523 2 48 rF365 571 2 2 rF367 571 130 2 rF497 523 2 48 rF497 571 2 2 rF499 571 129 2 rF628 523 2 48 rF628 571 2 2 rF630 571 167 2 rF797 523 2 48 rF797 571 2 2 rF799 571 429 2 rF1228 523 2 48 rF1228 571 2 2 rF1230 571 428 2 rF1658 523 4 48 rF1658 571 4 4 rF1658 571 4 4 rF1662 571 446 4 rF2108 523 4 48 rF2108 571 4 4 rF2108 571 4 4 rFgR1 GgS 0 0 2300 3033 rC115 1701 2070 1200 rF0 G145 1716 956 517 rC145 1716 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1101 2233 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate145 1716 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(0.5) Rshow
840 547 M
63 0 V
3545 0 R
-63 0 V
756 547 M
(0.6) Rshow
840 743 M
63 0 V
3545 0 R
-63 0 V
756 743 M
(0.7) Rshow
840 938 M
63 0 V
3545 0 R
-63 0 V
756 938 M
(0.8) Rshow
840 1134 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.9) Rshow
840 1330 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1) Rshow
840 1526 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.1) Rshow
840 1722 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.2) Rshow
840 1917 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.3) Rshow
840 2113 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.4) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.5) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(4) Cshow
1441 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2043 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3245 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3847 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Time in Seconds) Cshow
grestore
2644 71 M
(Number of Processors) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Simulator Vs Target \(SP\)) Cshow
LT0
3965 2106 M
(Target Execution) Rshow
4049 2106 M
252 0 V
840 2211 M
2343 1291 L
4448 841 L
4133 2106 D
840 2211 D
2343 1291 D
4448 841 D
LT1
3965 1966 M
(1 Processor Simulation) Rshow
4049 1966 M
252 0 V
840 1839 M
2343 880 L
4448 645 L
4133 1966 A
840 1839 A
2343 880 A
4448 645 A
LT2
3965 1826 M
(2 Processor Simulation) Rshow
4049 1826 M
252 0 V
840 1839 M
2343 880 L
4448 547 L
4133 1826 B
840 1839 B
2343 880 B
4448 547 B
LT3
3965 1686 M
(4 Processor Simulation) Rshow
4049 1686 M
252 0 V
840 1800 M
2343 860 L
4448 527 L
4133 1686 C
840 1800 C
2343 860 C
4448 527 C
LT4
3965 1546 M
(9 Processor Simulation) Rshow
4049 1546 M
252 0 V
2343 860 M
4448 566 L
4133 1546 T
2343 860 T
4448 566 T
LT5
3965 1406 M
(16 Processor Simulation) Rshow
4049 1406 M
252 0 V
4448 547 M
4133 1406 S
4448 547 S
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 145 1716 2011 1170 rC1101 2233 :M0 Gf130 sf(      )S1163 1718 957 515 rC1163 1718 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2120 2233 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1163 1718 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(0.8) Rshow
840 547 M
63 0 V
3545 0 R
-63 0 V
756 547 M
(1) Rshow
840 743 M
63 0 V
3545 0 R
-63 0 V
756 743 M
(1.2) Rshow
840 938 M
63 0 V
3545 0 R
-63 0 V
756 938 M
(1.4) Rshow
840 1134 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.6) Rshow
840 1330 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1.8) Rshow
840 1526 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2) Rshow
840 1722 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2.2) Rshow
840 1917 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2.4) Rshow
840 2113 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2.6) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2.8) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(4) Cshow
1441 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2043 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3245 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3847 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Time in Seconds) Cshow
grestore
2644 71 M
(Number of Processors) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Simulator Vs Target \(BT\)) Cshow
LT0
3965 2106 M
(Target Execution) Rshow
4049 2106 M
252 0 V
840 2123 M
2343 1242 L
4448 733 L
4133 2106 D
840 2123 D
2343 1242 D
4448 733 D
LT1
3965 1966 M
(1 Processor Simulation) Rshow
4049 1966 M
252 0 V
840 1996 M
2343 948 L
4448 478 L
4133 1966 A
840 1996 A
2343 948 A
4448 478 A
LT2
3965 1826 M
(2 Processor Simulation) Rshow
4049 1826 M
252 0 V
840 1976 M
2343 938 L
4448 478 L
4133 1826 B
840 1976 B
2343 938 B
4448 478 B
LT3
3965 1686 M
(4 Processor Simulation) Rshow
4049 1686 M
252 0 V
840 1976 M
2343 938 L
4448 468 L
4133 1686 C
840 1976 C
2343 938 C
4448 468 C
LT4
3965 1546 M
(9 Processor Simulation) Rshow
4049 1546 M
252 0 V
2343 919 M
4448 468 L
4133 1546 T
2343 919 T
4448 468 T
LT5
3965 1406 M
(16 Processor Simulation) Rshow
4049 1406 M
252 0 V
4448 459 M
4133 1406 S
4448 459 S
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregR0 GgS 145 2282 956 515 rC145 2282 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1101 2797 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate145 2282 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(0.05) Rshow
840 547 M
63 0 V
3545 0 R
-63 0 V
756 547 M
(0.055) Rshow
840 743 M
63 0 V
3545 0 R
-63 0 V
756 743 M
(0.06) Rshow
840 938 M
63 0 V
3545 0 R
-63 0 V
756 938 M
(0.065) Rshow
840 1134 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.07) Rshow
840 1330 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.075) Rshow
840 1526 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.08) Rshow
840 1722 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.085) Rshow
840 1917 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.09) Rshow
840 2113 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.095) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(0.1) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(4) Cshow
1441 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2043 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3245 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3847 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Time in Seconds) Cshow
grestore
2644 71 M
(Number of Processors) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Simulator Vs Target \(MG\)) Cshow
LT0
3965 2106 M
(Target Execution) Rshow
4049 2106 M
252 0 V
840 2309 M
2043 743 L
4448 351 L
4133 2106 D
840 2309 D
2043 743 D
4448 351 D
LT1
3965 1966 M
(1 Processor Simulation) Rshow
4049 1966 M
252 0 V
840 2309 M
2043 743 L
4448 351 L
4133 1966 A
840 2309 A
2043 743 A
4448 351 A
LT2
3965 1826 M
(2 Processor Simulation) Rshow
4049 1826 M
252 0 V
840 1917 M
2043 743 L
4448 351 L
4133 1826 B
840 1917 B
2043 743 B
4448 351 B
LT3
3965 1686 M
(4 Processor Simulation) Rshow
4049 1686 M
252 0 V
840 1917 M
2043 743 L
4448 351 L
4133 1686 C
840 1917 C
2043 743 C
4448 351 C
LT4
3965 1546 M
(8 Processor Simulation) Rshow
4049 1546 M
252 0 V
2043 743 M
4448 351 L
4133 1546 T
2043 743 T
4448 351 T
LT5
3965 1406 M
(16 Processor Simulation) Rshow
4049 1406 M
252 0 V
4448 351 M
4133 1406 S
4448 351 S
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 145 1716 2011 1170 rC1101 2797 :Mf130 sf(      )S1163 2280 957 517 rC1163 2280 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2120 2797 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1163 2280 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(300) Rshow
840 547 M
63 0 V
3545 0 R
-63 0 V
756 547 M
(400) Rshow
840 743 M
63 0 V
3545 0 R
-63 0 V
756 743 M
(500) Rshow
840 938 M
63 0 V
3545 0 R
-63 0 V
756 938 M
(600) Rshow
840 1134 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(700) Rshow
840 1330 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(800) Rshow
840 1526 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(900) Rshow
840 1722 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1000) Rshow
840 1917 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1100) Rshow
840 2113 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1200) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(1300) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(4) Cshow
1441 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2043 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3245 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3847 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Time in Seconds) Cshow
grestore
2644 71 M
(Number of Processors) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Simulator Vs Target \(LU\)) Cshow
LT0
3965 2106 M
(Target Execution) Rshow
4049 2106 M
252 0 V
840 2135 M
2043 1074 L
4448 571 L
4133 2106 D
840 2135 D
2043 1074 D
4448 571 D
LT1
3965 1966 M
(1 Processor Simulation) Rshow
4049 1966 M
252 0 V
840 2222 M
4133 1966 A
840 2222 A
LT2
3965 1826 M
(2 Processor Simulation) Rshow
4049 1826 M
252 0 V
840 2179 M
2043 1088 L
4133 1826 B
840 2179 B
2043 1088 B
LT3
3965 1686 M
(4 Processor Simulation) Rshow
4049 1686 M
252 0 V
840 2140 M
2043 1116 L
4448 530 L
4133 1686 C
840 2140 C
2043 1116 C
4448 530 C
LT4
3965 1546 M
(8 Processor Simulation) Rshow
4049 1546 M
252 0 V
2043 1075 M
4448 569 L
4133 1546 T
2043 1075 T
4448 569 T
LT5
3965 1406 M
(16 Processor Simulation) Rshow
4049 1406 M
252 0 V
4133 1406 S
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 145 1716 2011 1170 rC485 2860 :Mf130 sf(Figure 1)S623 2860 :M(: )S645 2860 :M.007 .001(Target Execution Time vs. Simulator Predictions )J1459 2860 :M.019 .002(for NAS Benchmarks)Jendpshowpage%%Page: 5 5%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 5 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 5 of )S2223 3011 :M(8)S145 209 :M0 Gf130 sf3.266 .327(they differ in the use of the protocol for EIT advance-)J145 257 :M1.504 .15(ment. The CEP mode \(uses conditional event protocol\),)J145 305 :M19.223 1.922(NMP mode \(uses null message protocol\) and)J145 353 :M1.593 .159(CEP+NMP mode \(combines both\). In the last mode the)J145 402 :M5.327 .533(simulation status is deterministic and both the cond)J1051 402 :M(i-)S145 450 :M23.519 2.352(tional event and the null message protocol)J145 498 :M8.842 .884(\(CEP+NMP+DET mode\) are used. These simulator)J145 546 :M4.462 .446(modes allow us to determine the contribution of each)J145 594 :M4.751 .475(protocol and each optimization to the performance of)J145 642 :M(the sim)S265 642 :M(u)S286 642 :M(lation.)S145 741 :Mf98 sf(4.4)S195 741 :Mf170 sf( )S265 741 :Mf98 sf.032 .003(Reducing Synchronizations)J145 828 :Mf130 sf3.939 .394(We compared all modes of each simulator against the)J145 876 :M13.042 1.304(traditional quantum protocol. Performance of the)J145 924 :M4.172 .417(simulation protocol in each simulator mode is gauged)J145 973 :M2.551 .255(by the number of rounds of protocol messages, R, sent)J145 1021 :M3.3 .33(per processor. The performance of the quantum proto)J1061 1021 :M(-)S145 1069 :M4.363 .436(col is measured as the number of global synchroniz)J1044 1069 :M(a-)S145 1117 :M5.251 .525(tions it takes to simulate the same target program. A)J145 1165 :M3.634 .363(round of protocol messages is similar to a global syn)J1061 1165 :M(-)S145 1213 :M4.892 .489(chronization, although it is frequently less expensive,)J145 1261 :M3.375 .337(since in many cases a processor does not need to wait)J145 1309 :M(to receive pr)S350 1309 :M(o)S371 1309 :M.013 .001(tocol messages from all other processors.)J145 1367 928 500 rC145 1367 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1073 1867 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate145 1367 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in SP: Targ Procs: 16, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 1626 V
629 0 V
0 -1626 V
-629 0 V
629 0 R
0 1620 V
630 0 V
0 -1620 V
-630 0 V
630 0 R
0 1585 V
629 0 V
0 -1585 V
-629 0 V
629 0 R
629 0 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 145 1915 928 500 rC145 1915 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1073 2415 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate145 1915 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in SP: Targ Procs: 9, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 853 V
629 0 V
0 -853 V
-629 0 V
629 0 R
0 890 V
630 0 V
0 -890 V
-630 0 V
630 0 R
0 752 V
629 0 V
0 -752 V
-629 0 V
629 0 R
629 0 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 0 0 2300 3033 rC252 2478 :Mf130 sf(Figure 2)S390 2478 :M.015 .001(: Performance of Simulators for SP)J190 2551 :M7.551 .755(Given a target processor configuration, we found)J145 2600 :M4.018 .402(that R decreases only modestly as the number of host)J145 2648 :M7.966 .797(processors used to simulate the configuration is in)J1061 2648 :M(-)S145 2696 :M2.747 .275(creased. Figures 2, 3, 4, and 5 show the variation of R)J145 2744 :M3.379 .338(with the simulator modes for two representative target)J145 2792 :M4.051 .405(and host processor configurations of each benchmark.)J145 2840 :M3.861 .386(In each graph, the number of rounds of protocol mes)J1062 2840 :M(-)S1225 209 :M3.737 .374(sages is normalized against the number of global sy)J2121 209 :M(n)S2142 209 :M(-)S1225 257 :M9.292 .929(chronizations of the quantum protocol. The X-axis)J1225 305 :M3.624 .362(shows the simulator mode, where \322N+C\323 refers to the)J1225 353 :M2.023 .202(NMP+CEP mode and the \322N+C+D\323 mode refers to the)J1225 402 :M.02 .002(NMP+CEP+Det mode.)J1225 459 928 500 rC1225 459 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2153 959 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1225 459 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in BT: Targ Procs: 16, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 1260 V
629 0 V
0 -1260 V
-629 0 V
629 0 R
0 1025 V
630 0 V
0 -1025 V
-630 0 V
630 0 R
0 939 V
629 0 V
0 -939 V
-629 0 V
629 0 R
629 0 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 1225 1007 928 500 rC1225 1007 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2153 1507 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1225 1007 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in BT: Targ Procs: 9, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 1224 V
629 0 V
0 -1224 V
-629 0 V
629 0 R
0 410 V
630 0 V
0 -410 V
-630 0 V
630 0 R
0 335 V
629 0 V
0 -335 V
-629 0 V
629 0 R
629 0 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 0 0 2300 3033 rC1329 1571 :Mf130 sf(Figure 3)S1467 1571 :M(: )S1489 1571 :M.015 .001(Perfomance for Simulators )J1941 1571 :M(for BT)S1225 1644 928 500 rC1225 1644 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2153 2144 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1225 1644 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in MG: Targ Procs: 16, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 2098 V
630 0 V
0 -2098 V
-630 0 V
630 0 R
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 1948 V
629 0 V
0 -1948 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 1225 2192 928 500 rC1225 2192 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2153 2692 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1225 2192 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in MG: Targ Procs: 8, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 1530 V
629 0 V
0 -1530 V
-629 0 V
629 0 R
0 1524 V
630 0 V
0 -1524 V
-630 0 V
630 0 R
0 1458 V
629 0 V
0 -1458 V
-629 0 V
629 0 R
0 1352 V
629 0 V
0 -1352 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 0 0 2300 3033 rC1322 2755 :Mf130 sf(Figure 4)S1460 2755 :M.012 .001(: Performance of Simulators )J1933 2755 :M(for MG)Sendpshowpage%%Page: 6 6%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 6 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 6 of )S2223 3011 :M(8)S0 G145 171 928 500 rC145 171 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1073 671 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate145 171 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in LU: Targ Procs: 16, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 1364 V
629 0 V
0 -1364 V
-629 0 V
629 0 R
0 1284 V
630 0 V
0 -1284 V
-630 0 V
630 0 R
0 1174 V
629 0 V
0 -1174 V
-629 0 V
629 0 R
0 1163 V
629 0 V
0 -1163 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 145 719 928 500 rC145 719 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1073 1219 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate145 719 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
672 211 M
3776 0 V
672 211 M
0 2098 V
LTb
672 211 M
63 0 V
3713 0 R
-63 0 V
588 211 M
(0) Rshow
672 631 M
63 0 V
3713 0 R
-63 0 V
588 631 M
(0.2) Rshow
672 1050 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.4) Rshow
672 1470 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.6) Rshow
672 1889 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(0.8) Rshow
672 2309 M
63 0 V
3713 0 R
-63 0 V
-3797 0 R
(1) Rshow
1301 211 M
0 63 V
0 2035 R
0 -63 V
1301 71 M
(Quant) Cshow
1931 211 M
0 63 V
0 2035 R
0 -63 V
1931 71 M
(NMP) Cshow
2560 211 M
0 63 V
0 2035 R
0 -63 V
2560 71 M
(CEP) Cshow
3189 211 M
0 63 V
0 2035 R
0 -63 V
3189 71 M
(N+C) Cshow
3819 211 M
0 63 V
0 2035 R
0 -63 V
3819 71 M
(N+C+D) Cshow
672 211 M
3776 0 V
0 2098 V
-3776 0 V
672 211 L
2560 2449 M
(Norm. Sync. in LU: Targ Procs: 8, Host Procs: 4 ) Cshow
LT0
987 211 M
0 2098 V
629 0 V
0 -2098 V
-629 0 V
629 0 R
0 734 V
629 0 V
0 -734 V
-629 0 V
629 0 R
0 585 V
630 0 V
0 -585 V
-630 0 V
630 0 R
0 500 V
629 0 V
0 -500 V
-629 0 V
629 0 R
0 501 V
629 0 V
0 -501 V
-629 0 V
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 0 0 2300 3033 rC248 1282 :Mf130 sf(Figure 5)S386 1282 :M.012 .001(: Performance of Simulators )J859 1282 :M(for LU)S190 1355 :M7.393 .739(Consider only the CEP mode: the amount of im)J1062 1355 :M(-)S145 1403 :M5.605 .561(provement over the quantum protocol is strongly de-)J145 1451 :M3.86 .386(pendent on the average duration for which an LP \(i.e.)J145 1499 :M1.991 .199(thread\) executes before getting blocked. )J830 1499 :M2.234 .223(Table 2)J958 1499 :M2.403 .24( shows)J145 1547 :M8.11 .811(this average duration for each benchmark and each)J145 1596 :M4.54 .454(target program configuration. L is the minimum mes)J1062 1596 :M(-)S145 1644 :M1.704 .17(sage latency of the target machine. The 9-processor BT)J1225 209 :M4.979 .498(benchmark has the largest average uninterrupted ex)J2124 209 :M(e-)S1225 257 :M3.339 .334(cution time per thread, and in the simulation, the CEP)J1225 305 :M2.609 .261(mode is able to eliminate more than 80% of the global)J1225 353 :M5.822 .582(synchronizations of the quantum protocol. The NMP)J1225 402 :M3.347 .335(mode is able to eliminate only 40% of the global syn)J2141 402 :M(-)S1225 450 :M2.727 .273(chronizations of the quantum protocol. This is because)J1225 498 :M6.457 .646(the CEP significantly improves over the NMP when)J1225 546 :M7.736 .774(some LPs are far ahead of the others in simulation)J1225 594 :M2.063 .206(time, requiring the other LPs to exchange many rounds)J1225 642 :M3.259 .326(of null messages to update their simulation times. The)J1225 690 :M3.889 .389(16-processor MG benchmark has the smallest average)J1225 738 :M13.2 1.32(uninterrupted execution time per thread, and the)J1225 787 :M3.964 .396(NMP+CEP mode is unable to significantly reduce the)J1225 835 :M9.462 .946(number of global synchronizations of the quantum)J1225 883 :M(protocol.)S1290 956 :M(Table )S1394 956 :M(2)S1415 956 :M(: )S1437 956 :M(Average Uninterrupted Execution Time)S1226 991 242 50 rC1253 1031 :M(Benchmark)SgRgS 1470 991 335 50 rC1514 1031 :Mf130 sf( 16 )S1576 1031 :M(Targ. )S1674 1031 :M(Proc.)SgRgS 1807 991 370 50 rC1842 1031 :Mf130 sf( 8 or 9 Targ. )S2056 1031 :M(Proc.)SgRgS 0 0 2300 3033 rC1224 991 2 2 rF1224 991 2 2 rF1226 991 242 2 rF1468 991 2 2 rF1470 991 335 2 rF1805 991 2 2 rF1807 991 370 2 rF2177 991 2 2 rF2177 991 2 2 rF1224 993 2 48 rF1468 993 2 48 rF1805 993 2 48 rF2177 993 2 48 rF1320 1081 :Mf130 sf(LU)S1583 1081 :M( 8.74L)S1928 1081 :M( 11.77L)S1224 1041 2 2 rF1226 1041 242 2 rF1468 1041 2 2 rF1470 1041 335 2 rF1805 1041 2 2 rF1807 1041 370 2 rF2177 1041 2 2 rF1224 1043 2 48 rF1468 1043 2 48 rF1805 1043 2 48 rF2177 1043 2 48 rF1314 1131 :M(MG)S1583 1131 :M( 2.79L)S1938 1131 :M( 4.03L)S1224 1091 2 2 rF1226 1091 242 2 rF1468 1091 2 2 rF1470 1091 335 2 rF1805 1091 2 2 rF1807 1091 370 2 rF2177 1091 2 2 rF1224 1093 2 48 rF1468 1093 2 48 rF1805 1093 2 48 rF2177 1093 2 48 rF1321 1182 :M(BT)S1573 1182 :M( 12.33L)S1928 1182 :M( 24.81L)S1224 1141 2 2 rF1226 1141 242 2 rF1468 1141 2 2 rF1470 1141 335 2 rF1805 1141 2 2 rF1807 1141 370 2 rF2177 1141 2 2 rF1224 1143 2 48 rF1468 1143 2 48 rF1805 1143 2 48 rF2177 1143 2 48 rF1324 1232 :M(SP)S1583 1232 :M( 4.61L)S1938 1232 :M( 9.29L)S1224 1192 2 2 rF1226 1192 242 2 rF1468 1192 2 2 rF1470 1192 335 2 rF1805 1192 2 2 rF1807 1192 370 2 rF2177 1192 2 2 rF1224 1194 2 48 rF1224 1242 2 2 rF1224 1242 2 2 rF1226 1242 242 2 rF1468 1194 2 48 rF1468 1242 2 2 rF1470 1242 335 2 rF1805 1194 2 48 rF1805 1242 2 2 rF1807 1242 370 2 rF2177 1194 2 48 rF2177 1242 2 2 rF2177 1242 2 2 rF1270 1330 :M8.274 .827(Using our optimizations for exploiting the dete)J2128 1330 :M(r)S2142 1330 :M(-)S1225 1378 :M5.082 .508(minism in the program, we note that it is possible to)J1225 1426 :M2.017 .202(eliminate )J1392 1426 :Mf241 sf3.468 .347(all global synchronizations)Jf130 sf1.607 .161( in the BT and SP)J1225 1475 :M6.038 .604(benchmarks. The optimizations were not effective in)J1225 1523 :M7.197 .72(significantly reducing the synchronizations from the)J1225 1571 :M3.691 .369(MG and LU benchmarks as discussed in the next sec-)J1225 1619 :M(tion.)S1 G145 1701 2070 1170 rF0 G175 1720 926 499 rC175 1720 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1101 2219 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate175 1720 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
840 351 M
3608 0 V
840 351 M
0 1958 V
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(0) Rshow
840 677 M
63 0 V
3545 0 R
-63 0 V
756 677 M
(2) Rshow
840 1004 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(4) Rshow
840 1330 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(6) Rshow
840 1656 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(8) Rshow
840 1983 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(10) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(12) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(0) Cshow
1291 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(2) Cshow
1742 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(4) Cshow
2193 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
3095 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3546 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3997 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Speedup) Cshow
grestore
2644 71 M
(Number of Processors In Simulation) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Sim. Char.: Speedup for SP) Cshow
LT0
LTa
3965 2106 M
(4 Processor Problem) Rshow
4049 2106 M
252 0 V
1066 514 M
225 123 V
451 195 V
4133 2106 P
1066 514 P
1291 637 P
1742 832 P
LT0
3965 1966 M
(9 Processor Problem) Rshow
4049 1966 M
252 0 V
1066 514 M
225 83 V
451 186 V
1128 540 V
4133 1966 D
1066 514 D
1291 597 D
1742 783 D
2870 1323 D
LT1
3965 1826 M
(16 Processor Problem) Rshow
4049 1826 M
252 0 V
1066 514 M
225 106 V
451 269 V
1128 632 V
1578 764 V
4133 1826 A
1066 514 A
1291 620 A
1742 889 A
2870 1521 A
4448 2285 A
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 175 1716 2011 1140 rC1101 2219 :Mf369 sf(        )S1211 2219 :M( )S1225 1716 934 503 rC1225 1716 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2159 2219 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1225 1716 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
840 351 M
0 1958 V
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(1) Rshow
840 631 M
63 0 V
3545 0 R
-63 0 V
756 631 M
(2) Rshow
840 910 M
63 0 V
3545 0 R
-63 0 V
756 910 M
(3) Rshow
840 1190 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(4) Rshow
840 1470 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(5) Rshow
840 1750 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(6) Rshow
840 2029 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(7) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(8) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(0) Cshow
1291 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(2) Cshow
1742 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(4) Cshow
2193 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
3095 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3546 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3997 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Speedup) Cshow
grestore
2644 71 M
(Number of Processors In Simulation) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Sim. Char.: Speedup for BT) Cshow
LT0
LTa
3965 2106 M
(4 Processor Problem) Rshow
4049 2106 M
252 0 V
1066 351 M
225 229 V
451 321 V
4133 2106 P
1066 351 P
1291 580 P
1742 901 P
LT0
3965 1966 M
(9 Processor Problem) Rshow
4049 1966 M
252 0 V
1066 351 M
225 160 V
451 240 V
1128 508 V
4133 1966 D
1066 351 D
1291 511 D
1742 751 D
2870 1259 D
LT1
3965 1826 M
(16 Processor Problem) Rshow
4049 1826 M
252 0 V
1066 351 M
225 198 V
451 412 V
1128 492 V
1578 600 V
4133 1826 A
1066 351 A
1291 549 A
1742 961 A
2870 1453 A
4448 2053 A
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 175 2274 940 503 rC175 2274 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate1115 2777 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate175 2274 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
840 351 M
0 1958 V
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(1) Rshow
840 677 M
63 0 V
3545 0 R
-63 0 V
756 677 M
(1.5) Rshow
840 1004 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2) Rshow
840 1330 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2.5) Rshow
840 1656 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(3) Rshow
840 1983 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(3.5) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(4) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(0) Cshow
1291 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(2) Cshow
1742 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(4) Cshow
2193 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
3095 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3546 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3997 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Speedup) Cshow
grestore
2644 71 M
(Number of Processors In Simulation) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Sim. Char.: Speedup for MG) Cshow
LT0
LTa
3965 2106 M
(4 Processor Problem) Rshow
4049 2106 M
252 0 V
1066 351 M
225 132 V
451 280 V
4133 2106 P
1066 351 P
1291 483 P
1742 763 P
LT0
3965 1966 M
(8 Processor Problem) Rshow
4049 1966 M
252 0 V
1066 351 M
225 208 V
451 211 V
902 669 V
4133 1966 D
1066 351 D
1291 559 D
1742 770 D
2644 1439 D
LT1
3965 1826 M
(16 Processor Problem) Rshow
4049 1826 M
252 0 V
1066 351 M
225 286 V
451 371 V
902 431 V
1804 565 V
4133 1826 A
1066 351 A
1291 637 A
1742 1008 A
2644 1439 A
4448 2004 A
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 175 1716 2011 1140 rC1115 2777 :Mf369 sf(        )S1225 2274 936 503 rC1225 2274 :M/Access_Softek_context save def/dict_count countdictstack def/op_count count 1 sub def/cxy [ currentpoint ] def66 dict begin/showpage {} def0 setgray 0 setlinecap1 setlinewidth 0 setlinejoin10 setmiterlimit [] 0 setdash/languagelevel where{pop languagelevel1 ne {false setstrokeadjust false  setoverprint  } if } if 0 792 translate 1 -1 scale cxy 0 get 792 cxy 1 get sub translate2161 2777 :M/exy [ currentpoint ] defexy 0 get cxy 0 get sub 468 div exy 1 get cxy 1 get sub 252 div scale-50 -302 translate1225 2274 :M%!PS-Adobe-2.0
%%Creator: gnuplot
%%DocumentFonts: NewCenturySchlbk-Bold
%%BoundingBox: 50 50 518 302
%%Pages: (atend)
%%EndComments
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 31.5 def
/vpt 31.5 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
/NewCenturySchlbk-Bold findfont 140 scalefont setfont
newpath
LTa
840 351 M
0 1958 V
LTb
840 351 M
63 0 V
3545 0 R
-63 0 V
756 351 M
(1) Rshow
840 743 M
63 0 V
3545 0 R
-63 0 V
756 743 M
(1.5) Rshow
840 1134 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2) Rshow
840 1526 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(2.5) Rshow
840 1917 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(3) Rshow
840 2309 M
63 0 V
3545 0 R
-63 0 V
-3629 0 R
(3.5) Rshow
840 351 M
0 63 V
0 1895 R
0 -63 V
840 211 M
(0) Cshow
1291 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(2) Cshow
1742 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(4) Cshow
2193 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(6) Cshow
2644 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(8) Cshow
3095 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(10) Cshow
3546 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(12) Cshow
3997 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(14) Cshow
4448 351 M
0 63 V
0 1895 R
0 -63 V
0 -2035 R
(16) Cshow
840 351 M
3608 0 V
0 1958 V
-3608 0 V
840 351 L
140 1330 M
currentpoint gsave translate 90 rotate 0 0 M
(Speedup) Cshow
grestore
2644 71 M
(Number of Processors In Simulation) Cshow
2644 2449 M
(\(NMP+CEP+Det\) Sim. Char.: Speedup for LU) Cshow
LT0
LTa
3965 2106 M
(4 Processor Problem) Rshow
4049 2106 M
252 0 V
1066 351 M
225 585 V
451 991 V
4133 2106 P
1066 351 P
1291 936 P
1742 1927 P
LT0
3965 1966 M
(8 Processor Problem) Rshow
4049 1966 M
252 0 V
1291 351 M
451 440 V
902 1224 V
4133 1966 D
1291 351 D
1742 791 D
2644 2015 D
LT1
3965 1826 M
(16 Processor Problem) Rshow
4049 1826 M
252 0 V
1742 351 M
902 475 V
4448 2083 L
4133 1826 A
1742 351 A
2644 826 A
4448 2083 A
stroke
grestore
end
showpage
%%Trailer
%%Pages: 1
count op_count sub {pop} repeatcountdictstack dict_count sub {end} repeatAccess_Softek_context restoregRgS 175 1716 2011 1140 rC896 2839 :Mf130 sf.011 .001(Figure 6: Fast Simulator Speedups)Jendpshowpage%%Page: 7 7%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 7 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 7 of )S2223 3011 :M(8)S145 208 :M0 Gf98 sf(4.5)S195 208 :Mf170 sf( )S265 208 :Mf98 sf.021 .002(Reducing Simulator Execution Times)J145 295 :Mf130 sf7.807 .781(We present the speedup measured by executing the)J145 343 :M4.809 .481(parallel simulator using the combined NMP and CEP)J145 391 :M4.908 .491(algorithm as well as the deterministic protocol. A r)J1044 391 :M(e-)S145 439 :M8.874 .887(ceive can be deterministic either if it specifies the)J145 487 :M1.961 .196(source explicitly or it specifies an explicit tag and each)J145 535 :M3.146 .315(source uses unique tags. Although the first type of de-)J145 583 :M2.422 .242(terminism can be detected automatically by the current)J145 632 :M7.358 .736(simulator, we have not yet implemented the second)J145 680 :M5.961 .596(mode. Out of the four benchmarks used, SP and BT)J145 728 :M5.849 .585(have the determinism of first type. The MG and LU)J145 776 :M9.761 .976(benchmarks have determinism of second kind. Al-)J145 824 :M7.137 .714(though this optimization is not automatically imple-)J145 872 :M4.227 .423(mented in the compiler, we manually inserted the o)J1041 872 :M(p)S1062 872 :M(-)S145 920 :M2.455 .245(timizations to evaluate the potential benefit that can be)J145 968 :M3.233 .323(derived from exploiting this form of non-determinism.)J145 1016 :M4.013 .401(The final speedups obtained from the execution of all)J145 1065 :M2.317 .232(the benchmarks are presented in Figure 6)J843 1065 :M2.466 .247(. We measure)J145 1113 :M1.887 .189(speedup\(N\) by taking the ratio of the execution time of)J145 1161 :M5.905 .59(the sequential simulator to the execution time of the)J145 1209 :M1.942 .194(simulator using N processors. The speedups for the LU)J145 1257 :M3.657 .366(benchmarks are relative to the smallest host processor)J145 1305 :M4.463 .446(configuration that could be used to run the simulator.)J145 1353 :M2.721 .272(For example, the 8 target processor simulator could be)J145 1401 :M1.803 .18(executed on 2, 4 or 8 host processors. Hence, the refer)J1062 1401 :M(-)S145 1450 :M5.298 .53(ence execution time is of the 2-processor simulation.)J145 1498 :M4.177 .418(This )Jf241 sf1.295(understates)Af130 sf6.134 .613( the expected performance improve-)J145 1546 :M8.804 .88(ment for this application. Notice that the speedups)J145 1594 :M5.174 .517(achieved with the simulation are characteristic of the)J145 1642 :M6.071 .607(application itself, as the simulation overhead is rela-)J145 1690 :M(tively small.)S145 1800 :Mf98 sf(5)Sf170 sf( )S201 1800 :Mf98 sf(RELATED WORK)S145 1890 :Mf130 sf3.386 .339(Most simulation engines use sequential or parallel i)J1030 1890 :M(m)S1062 1890 :M(-)S145 1939 :M5.197 .52(plementations of the quantum protocol. Among these)J145 1987 :M3.306 .331(are Proteus \(Brewer et )J544 1987 :M2.842 .284(al 1991\), a parallel architecture)J145 2035 :M3.419 .342(simulation engine, Tango \()J606 2035 :M4.182 .418(Davis et al)J794 2035 :M4.182 .418( 1991\), a shared)J145 2083 :M10.706 1.071(memory architecture simulation engine, Wisconsin)J145 2131 :M3.011 .301(Wind Tunnel \(Reinhardt et al 1993\), a shared memory)J145 2179 :M3.244 .324(architecture simulation engine and SimOS, a complete)J145 2227 :M8.252 .825(system simulator \(multiple programs plus operating)J145 2275 :M1.675 .167(system\). Two simulation engines which use approaches)J145 2324 :M1.806 .181(similar to ours are Parallel )J602 2324 :M1.568 .157(Proteus \(Legedza )J903 2324 :M1.557 .156(and Weihl)J145 2372 :M(1996\) )S251 2372 :M(and LAPSE.)S190 2420 :M3.762 .376(Parallel )J331 2420 :M4.612 .461(Proteus is the )J583 2420 :M3.441 .344(parallelization of the Proteus)J145 2468 :M5.882 .588(simulation engine, which uses the quantum protocol.)J145 2516 :M3.46 .346(The synchronization overhead caused by frequent ba)J1048 2516 :M(r)S1062 2516 :M(-)S145 2564 :M3.192 .319(riers is reduced using two methods: \(a\) )J828 2564 :M2.168 .217(Predictive bar)J1062 2564 :M(-)S145 2612 :M8.078 .808(riers and \(b\) Local barriers. )J669 2612 :M7.228 .723(Predictive barriers is a)J145 2660 :M5.879 .588(method for safely increasing the simulation quantum)J145 2708 :M2.959 .296(beyond L, the minimum communication latency of the)J145 2757 :M2.433 .243(target machine. )J417 2757 :M2.507 .251(This method uses runtime and compile)J145 2805 :M2.556 .256(time analysis to determine, at the beginning of a simu)J1061 2805 :M(-)S145 2853 :M5.522 .552(lation quantum, the earliest simulation time at which)J1225 209 :M5.12 .512(any LP will send a message to any other LP. Conse-)J1225 257 :M3.252 .325(quently, the simulation quantum can be extended until)J1225 305 :M1.932 .193(that time. Runtime analysis involves simply running an)J1225 353 :M.998 .1(LP until it communicates. If it stops at the equivalent of)J1225 402 :M1.397 .14(a receive statement, analysis performed at compile time)J1225 450 :M1.767 .177(is used to predict when it would have sent a message if)J1225 498 :M2.157 .216(it were instantly resumed. The method of local barriers)J1225 546 :M6.552 .655(uses statically available communication topology in)J2141 546 :M(-)S1225 594 :M5.691 .569(formation \(i.e. groups of LPs that communicate only)J1225 642 :M3.528 .353(within the groups they belong to\) to reduce the global)J1225 690 :M3.475 .348(synchronization at the end of a simulation quantum to)J1225 738 :M.01 .001(local synchronizations between groups of LPs.)J1270 787 :M2.543 .254(LAPSE \(Dickens et al 1994\) is a parallel simulation)J1225 835 :M3.256 .326(engine for programs using the )J1753 835 :M2.458 .246(message passing library)J1225 883 :M2.944 .294(of the Intel Paragon. It uses a quantum protocol called)J1225 931 :M8.442 .844(WHOA \(Window-based Halting On Appointments\).)J1225 979 :M2.556 .256(Like Parallel )J1455 979 :M2.508 .251(Proteus, it uses runtime analysis to deter)J2142 979 :M(-)S1225 1027 :M4.222 .422(mine the size of the simulation quantum, but the run)J2141 1027 :M(-)S1225 1075 :M5.692 .569(time analysis is not supplemented with compile time)J1225 1123 :M(analysis.)S1270 1171 :M7.996 .8(In comparison, we use the equivalent of runtime)J1225 1220 :M4.463 .446(analysis since we execute an LP until it reaches a re-)J1225 1268 :M3.221 .322(ceive statement. The benefits of compile time analysis)J1225 1316 :M10.42 1.042(are achieved using the conditional event protocol,)J1225 1364 :M3.988 .399(which is portable and does not need target instruction)J1225 1412 :M1.542 .154(set analysis. In addition, our implementation of the null)J1225 1460 :M4.364 .436(message protocol adapts automatically to the dynami-)J1225 1508 :M5.99 .599(cally changing communication topology specified by)J1225 1556 :M3.899 .39(the target program. Perhaps most importantly, it auto)J2141 1556 :M(-)S1225 1604 :M9.41 .941(matically recognizes \(some forms of\) deterministic)J1225 1653 :M3.685 .368(code and switches off all synchronization while simu)J2141 1653 :M(-)S1225 1701 :M5.517 .552(lating it; automatic recognition of other forms of d)J2124 1701 :M(e-)S1225 1749 :M2.467 .247(terminism are being added to the simulator. As seen in)J1225 1797 :M4.24 .424(Section 4)J1386 1797 :M4.402 .44(, this optimization helps us eliminate almost)J1225 1845 :M6.279 .628(all the synchronization overhead in simulating many)J1225 1893 :M(real applications.)S1225 2003 :Mf98 sf(6)Sf170 sf( )S1281 2003 :Mf98 sf.008(CONCLUSION)A1225 2094 :Mf130 sf2.06 .206(In this paper, we have shown the usefulness of the null)J1225 2142 :M1.404 .14(message and the conditional event protocols in the co)J2121 2142 :M(n)S2142 2142 :M(-)S1225 2190 :M3.976 .398(servative parallel simulation of parallel programs. We)J1225 2238 :M6.644 .664(have used application characteristics to optimize the)J1225 2286 :M1.708 .171(performance of the null message protocol, and used the)J1225 2334 :M5.163 .516(comparatively slower conditional event protocol only)J1225 2382 :M1.352 .135(where the null message protocol fails. We have demo)J2121 2382 :M(n)S2142 2382 :M(-)S1225 2430 :M10.057 1.006(strated that for deterministic sections of code, the)J1225 2479 :M3.995 .4(simulation protocol can be bypassed completely wit)J2121 2479 :M(h)S2142 2479 :M(-)S1225 2527 :M4.89 .489(out affecting the correctness of the simulation. These)J1225 2575 :M4.818 .482(optimizations have been implemented in a simulation)J1225 2623 :M6.543 .654(library \(MPI-SIM\) for a subset of MPI, an accepted)J1225 2671 :M4.04 .404(standard for message passing parallel programs. MPI-)J1225 2719 :M1.828 .183(SIM has been validated and shown to be fast for a sub)J2141 2719 :M(-)S1225 2767 :M.011 .001(set of the NAS Parallel Benchmarks \(NPB 2\).)Jendpshowpage%%Page: 8 8%%BeginPageSetupinitializepage(Monnica Terwilliger; page: 8 of 8)setjob%%EndPageSetupgS 0 0 2300 3033 rC2039 3011 :M.753 Gf59 sf(Page 8 of )S2223 3011 :M(8)S145 209 :M0 Gf98 sf.004(ACKNOWLEDGMENTS)A145 305 :Mf130 sf5.833 .583(This work was supported by the Advanced Research)J145 353 :M7.751 .775(Projects Agency, DARPA/CSTO, under Contract F-)J145 402 :M4.776 .478(30602-94-C-0273, \322Scalable Systems Software Mea)J1046 402 :M(s)S1062 402 :M(-)S145 450 :M1.78 .178(urement and Evaluation\323 and by DARPA/ITO Contract)J145 498 :M5.55 .555(N-66001-97-C-8533, \322End-to-End Performance Mod)J1061 498 :M(-)S145 546 :M21.031 2.103(eling of Large Heterogenous Adaptive Paral-)J145 594 :M10.206 1.021(lel/Distributed Computer/Communication Systems.\323)J145 642 :M2.214 .221(All data was collected on the IBM SP2 at UCLA\325s O)J1048 642 :M(f)S1062 642 :M(-)S145 690 :M8.177 .818(fice of Academic Computing, granted to UCLA by)J145 738 :M9.84 .984(IBM Corporation under the Shared University Re-)J145 787 :M(search Program.)S145 883 :Mf98 sf.006(REFERENCES)A145 979 :Mf130 sf2.451 .245(Brewer, E. A., C. N. Dellarocas, A. Colbrook, And W.)J220 1027 :M15.339 1.534(E. )J285 1027 :M8.011 .801(Weihl., Technical Report MIT/LCS/TR-516,)J220 1075 :M13.996 1.4(Massachusetts Institute of Technology, Ca)J1030 1075 :M(m)S1062 1075 :M(-)S220 1123 :M(bridge, MA 02139, 1991.)S145 1171 :M4.504 .45(Bagrodia, R., S. )J438 1171 :M(Docy)S527 1171 :M4.32 .432(, and A. Kahn, Parallel Simula-)J220 1220 :M2.669 .267(tion of Parallel File Systems and I/O Programs. In)J220 1268 :Mf241 sf(Supercomputing 97)S540 1268 :Mf130 sf(, 1997.)S145 1316 :M4.711 .471(Bailey, D., T. Harris, W. )J596 1316 :M5.047 .505(Saphir, R. V. D. )J900 1316 :M(Wijngaart)S1064 1316 :M(,)S220 1364 :M14.07 1.407(A. Woo, and M. Yarrow. )J744 1364 :M11.585 1.158(The NAS Parallel)J220 1412 :M8.528 .853(Benchmarks 2.0. Technical Report Nas-95-020,)J220 1460 :M7.961 .796(Nasa Ames Research Center, Moffet Field, CA)J220 1508 :M(94035-1000, Dece)S523 1508 :M(m)S555 1508 :M(ber 1995.)S145 1556 :M3.114 .311(Covington, R. G., S. Dwarkadas, J. R. Jump, J.B. Si)J1040 1556 :M(n)S1061 1556 :M(-)S220 1604 :M(clair)S293 1604 :M4.039 .404(,  and S. Madala. )J607 1604 :M2.905 .291(The Efficient Simulation of)J220 1653 :M(Par)S275 1653 :M(allel Computer Systems. )Sf241 sf(IJCS)S767 1653 :Mf130 sf(, 1:31-58, 1991.)S145 1701 :M2.08 .208(Chandy K. M., and J. Misra. Distributed Simulation: A)J220 1749 :M3.471 .347(Case Study in Design and Verification of Distrib)J1061 1749 :M(-)S220 1797 :M7.283 .728(uted Programs. )Jf241 sf8.85 .885(IEEE Transactions on Software)J220 1845 :M(Engineering)S423 1845 :Mf130 sf.007 .001(, Pages 440-452, September 1979.)J145 1893 :M1.417 .142(Chandy K. M., and R. Sherman. The Conditional Event)J220 1941 :M4.7 .47(Approach to Distributed Simulation. In )Jf241 sf1.457(Proceed)A1061 1941 :M(-)S220 1989 :M9.48 .948(ings of the SCS )J532 1989 :M5.329 .533(Multiconference on Distributed)J220 2038 :M(Sim)S282 2038 :M(u)S303 2038 :M(lation)S399 2038 :Mf130 sf(, Miami, Pages 93-99, 1989.)S145 2086 :M4.903 .49(Davis, H., S. R. Goldschmidt)J657 2086 :M6.559 .656(, and )J764 2086 :M(Hennessey)S942 2086 :M7.453 .745(. )J971 2086 :M(Mult)S1051 2086 :M(i-)S220 2134 :M2.121 .212(processor Simulation and Tracing Using Tango. In)J220 2182 :Mf241 sf6.233 .623(Proceedings of ICPP '91)J661 2182 :Mf130 sf6.359 .636(, Pages 99-107, August)J220 2230 :M(1991.)S145 2278 :M3.717 .372(Dickens, P., P. )J414 2278 :M(Heidelberger)S628 2278 :M4.394 .439(, and D. )J785 2278 :M3.287 .329(Nicol. A Distri)J1041 2278 :M(b)S1062 2278 :M(-)S220 2326 :M4.761 .476(uted Memory Lapse: Parallel Simulation of Me)J1046 2326 :M(s)S1062 2326 :M(-)S220 2374 :M4.871 .487(sage-Passing Programs. In )Jf241 sf5.704 .57(Workshop on Parallel)J220 2422 :M12.588 1.259(and Distributed Simulation)Jf130 sf8.401 .84(, Pages 32-38, July)J220 2471 :M(1994.)S145 2519 :M3.427 .343(Dickens, P. M., P. )J474 2519 :M(Heidelberger)S688 2519 :M3.965 .397(, and )J788 2519 :M(D.M.)S875 2519 :M3.425 .342( Nicol. Pa)J1048 2519 :M(r)S1062 2519 :M(-)S220 2567 :M2.558 .256(allelized Direct Execution Simulation of Message-)J220 2615 :M4.482 .448(Passing Parallel Programs. )J694 2615 :Mf241 sf4.288 .429(IEEE Transactions on)J220 2663 :M7.947 .795(Parallel and Distributed Systems)J812 2663 :Mf130 sf10.77 1.077(, 6\(4\))J917 2663 :M(:297-320,)S220 2711 :M(October 1996.)S145 2759 :M1.851 .185(Feldman, S. I., D. M. Gay, Mark W. Maimone, And N.)J220 2807 :M4.576 .458(L. Schryer)J402 2807 :M7.875 .787(. )J432 2807 :M4.073 .407(A Fortran-To-C Converter. Technical)J220 2855 :M2.747 .275(Report No. 149, AT&T Bell Laboratories, Murray)J1300 209 :M(Hill, NJ, May 1990.)S1225 257 :M8.053 .805(MPI Forum. MPI: A Message Passing Interface. In)J1300 305 :Mf241 sf3.16 .316(Proceedings of 1993 Supercomputing Conference)J2145 305 :Mf130 sf(,)S1300 353 :M(Portland, Washington, November 1993.)S1225 402 :M11.36 1.136(Fujimoto, R.  Parallel Discrete Event Simulation.)J1300 450 :Mf241 sf5.364 .536(Communications of The ACM)J1818 450 :Mf130 sf5.367 .537(, 33\(10\):30-53, O)J2124 450 :M(c-)S1300 498 :M(tober 1990.)S1225 546 :M4.663 .466(Jha V., and R. Bagrodia. Transparent Implementation)J1300 594 :M2.773 .277(of Conservative Algorithms In Parallel Simulation)J1300 642 :M2.998 .3(Languages. In )Jf241 sf4.368 .437(Winter Simulation Conference)Jf130 sf1.755 .175(, D)J2124 642 :M(e-)S1300 690 :M(cember 1993.)S1225 738 :M4.046 .405(Legedza U., and W. E. )J1638 738 :M2.451 .245(Weihl. Reducing Synchroniza-)J1300 787 :M9.57 .957(tion Overhead in Parallel Simulation. In )J2062 787 :Mf241 sf(Tenth)S1300 835 :M3.767 .377(Workshop on Parallel and Distributed Simulation)J1300 883 :M(PADS 96,)S1462 883 :Mf130 sf( May 1996.)S1225 931 :M3.239 .324(Misra, J. Distributed Discrete-Event Simulation. ACM)J1300 979 :M.01 .001(Computing Surveys, 18\(1\):39-65, March 1986.)J1225 1027 :M6.387 .639(Prakash, S.  Performance Prediction of Parallel Pro)J2141 1027 :M(-)S1300 1075 :M7.181 .718(grams. Ph.D. Thesis, Computer Science Depart-)J1300 1123 :M6.439 .644(ment, Ucla, Los Angeles, CA 90095, November)J1300 1171 :M(1996.)S1225 1220 :M1.578 .158(Rosenblum, M)J1473 1220 :M2.636 .264(.. E. )J1556 1220 :M(Begnion)S1695 1220 :M2.75 .275(, S. )J1766 1220 :M2.241 .224(Devine, and S. A. He)J2128 1220 :M(r)S2142 1220 :M(-)S1300 1268 :M(rod)S1355 1268 :M13.486 1.349(. Using The )J1614 1268 :M10.061 1.006(SimOS Machine Simulator to)J1300 1316 :M5.749 .575(Study Complex Computer Systems. )J1939 1316 :Mf241 sf6.013 .601(ACM Tran)J2126 1316 :M(s)S2142 1316 :M(-)S1300 1364 :M7.804 .78(actions on Modeling and Computer Simulation)Jf130 sf(,)S1300 1412 :M(7\(1\), January 1997.)S1225 1460 :M1.407 .141(Reinhardt, S. K)J1485 1460 :M1.744 .174(.. M. D. Hill, J. R. Larus, A. R. )J2024 1460 :M(Lebeck,)S1300 1508 :M9.32 .932(J. C. Lewis, and D. A. Wood. The Wisconsin)J1300 1556 :M12.508 1.251(Wind Tunnel: Virtual Prototyping of Parallel)J1300 1604 :M3.599 .36(Computers. In )Jf241 sf3.289 .329(Proceedings of the 1993 ACM )J2088 1604 :M(Si)S2120 1604 :M(g)S2141 1604 :M(-)S1300 1653 :M(metrics)S1421 1653 :M( Confer)S1545 1653 :M(ence)Sf130 sf(, May 1993.)S1225 1701 :M1.487 .149(Rosenblum, M)J1472 1701 :M2.455 .245(.. S. A. )J1606 1701 :M1.834 .183(Herrod, Emmett )J1889 1701 :M1.828 .183(Witchel, and A.)J1300 1749 :M8.32 .832(Gupta. Complete Computer System Simulation:)J1300 1797 :M2.319 .232(The SimOS Approach. )Jf241 sf2.408 .241(IEEE Parallel and Distrib)J2141 1797 :M(-)S1300 1845 :M(uted Technology)Sf130 sf(. Vol. 3, No. 4, Winter 1995.)S1225 1941 :Mf98 sf.03 .003(AUTHOR BIOGRAPHIES)J1225 2038 :M4.973 .497(SUNDEEP PRAKASH)J1639 2038 :Mf130 sf7.194 .719( Sundeep Prakash received a)J1225 2086 :M5.594 .559(B.Tech in Electrical Engineering from the Indian I)J2121 2086 :M(n)S2142 2086 :M(-)S1225 2134 :M6.225 .622(stitute of Technology, Delhi, India in 1989, an )J2075 2134 :M(M.S.)S1225 2182 :M4.409 .441(from the University of Florida in 1991 and a )J2023 2182 :M4.11 .411(Ph.D in)J1225 2230 :M3.855 .385(Computer Science from UCLA, Los Angeles in 1996.)J1225 2278 :M1.409 .141(Since 1997, he has been a software engineer at TIBCO,)J1225 2326 :M2.254 .225(Palo Alto. His research interests include algorithms for)J1225 2374 :M2.805 .281(parallel and distributed simulation, compilation of pa)J2128 2374 :M(r)S2142 2374 :M(-)S1225 2422 :M3.661 .366(allel programs for shared and distributed memory ma-)J1225 2471 :M.008 .001(chines, and messaging interfaces and pro)J1897 2471 :M(tocols.)S1225 2567 :Mf98 sf7.222 .722(RAJIVE L. BAGRODIA )J1705 2567 :Mf130 sf8.013 .801(is a professor in the D)J2124 2567 :M(e-)S1225 2615 :M8.503 .85(partment of Computer Science at the University of)J1225 2663 :M1.136 .114(California, Los Angeles. He holds an )J1855 2663 :M1.187 .119(M.S. and Ph.D. in)J1225 2711 :M8.723 .872(Computer Science from the University of Texas at)J1225 2759 :M6.127 .613(Austin. His research interests include computer)J2059 2759 :Mf209 sf11.751 1.175( )J2096 2759 :Mf130 sf(and)S1225 2807 :M5.908 .591(communication networks, nomadic systems, and pa)J2128 2807 :M(r)S2142 2807 :M(-)S1225 2855 :M(allel lan)S1356 2855 :M(guages.)Sendpshowpage%%Trailerend%%EOF