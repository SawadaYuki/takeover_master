+ dmtcpmessage.h
 - 1.通信の効率化の有無の判定のステートを用意
 
 namespace dmtcp
{

  enum DmtcpMessageType
  {
  .
  .
  .
    DMT_OK,                  // slave telling coordinator it is done (response
                             //   to DMT_DO_*)  this means slave reached barrier
    DMT_RESTART_WORKER_WITH_CHG_DOMAIN, //sawada add 
  };

 - 2.生き残ったホストIDを付加するためのメンバ変数を追加
  
 struct DmtcpMessage
  {
  .
  .
  .
  // sawad original: start
    uint64_t dumyhostid;
  //int isChangeIPCProtocol;
  }


- 3.メッセージタイプ変更用のメンバ関数
  //sawada org:s 
    void changeMsgType( DmtcpMessageType t);
  //sawada org:e 

+ dmtcpmessage.cpp:dmtcp::DmtcpMessage::DmtcpMessage 
 - 追加したメンバ変数のコンストラクタ

    :_msgSize ( sizeof ( DmtcpMessage ) )
    ,extraBytes ( 0 )
    ,type ( t )
    ,state ( WorkerState::currentState() )
    ,from ( UniquePid::ThisProcess() )
    ,virtualPid ( -1 )
    ,realPid ( -1 )
    ,keyLen ( 0 )
    ,valLen ( 0 )
    ,numPeers(0)
    ,isRunning(0)
    ,coordCmd('\0')
    ,coordCmdStatus(CoordCmdStatus::NOERROR)
    ,coordTimeStamp(0)
    ,dumyhostid(0) //sawada add
    ,theCheckpointInterval ( DMTCPMESSAGE_SAME_CKPT_INTERVAL )
 {
