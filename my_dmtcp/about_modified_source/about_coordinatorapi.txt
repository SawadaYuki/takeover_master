  + 変数
  int balanceproc20151118 = 0;  => 負荷分散したプロセスがあるかどうか
  int numofProcess= 0; => リスタート用に復元したプロセスの数
  std::vector<uint64_t> RecvHostIds; => 生き残っているノードのホストID
  std::string sProcessLocation;// s(PID1+PID2+ ... /IP1+IP2+... /IsParent + IsParent +... => プロセスの情報(PID・IPアドレス・親プロセス)

  + void dmtcp::CoordinatorAPI::recvMsgFromCoordinator(dmtcp::DmtcpMessage *msg,
                                                   void **extraData)
    - プロセスの位置情報をcoordinatorからもらう

  else if(msg->type == DMT_DO_REGISTER_NAME_SERVICE_DATA && msg->state == WorkerState::RESTARTING && msg->extraBytes > 0 ){
    msg->assertValid();
    JASSERT(msg->extraBytes > 0);
    uint32_t size = msg->extraBytes;
    void *buf = JALLOC_HELPER_MALLOC(size);
    JTRACE("reading process location")(size);
    _coordinatorSocket.readAll((char*)buf, size);
    
    sProcessLocation = (char*)buf;
    JASSERT(sProcessLocation.size() > 0).Text("empty of process location info");
    JTRACE("read process location")((char*)buf)(sProcessLocation);
   
  }

  + void dmtcp::CoordinatorAPI::connectToCoordOnRestart(CoordinatorMode  mode,
                                                    dmtcp::string progname,
                                                    UniquePid compGroup,
                                                    int np,
                                                    CoordinatorInfo *coordInfo,
                                                    struct in_addr  *localIP)

    - 通信の切り替えオプションがonになったことを確認したら，coordinatorへその旨を知らせる

  if( getenv(ENV_FLAG_CHANGE_DOMAIN) != NULL ){
    if( strcmp(getenv(ENV_FLAG_CHANGE_DOMAIN),"true") == 0 )  {
      JTRACE("Next changeMsgType");
      hello_local.changeMsgType(DMT_RESTART_WORKER_WITH_CHG_DOMAIN);
    }
  } 

    - 負荷分散したプロセスがあるかどうかのフラグ情報をもらう

    if(strcmp(msg.nsid,"b") == 0){
    balanceproc20151118 = 1;
    JTRACE("detect:this proc is balance proc")(msg.nsid)(balanceproc20151118);
    }else{
    balanceproc20151118 = 0;
    }
